{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/boolean_field.cljc"],"mappings":";AAaA,AAAA,AAAAA,AAAMM,AAAoDG;AAA1D,AAAA,AAAAR,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAqDO;AAArD,AAAAH,AAAAJ,AAAA,AAAkCM;AAAlC,AACE,AAAMG,AAAY,AAAA,AAAsBD;AAClCE,AAAY,AAACC,AAAAA,AAAAA,AAAWL,AAAAA;AACxBM,AAAY,AAACC,AAAG,AAAA,AAACC,AAAwBP,AAAIC,AAAwBD;AACrEQ,AAAY,AAACC,AAAiBT,AAAIC;AAClCS,AAAY,AAACC,AAAgBZ,AAAcE;AAC3CW,AAAY,AAAA,AAACf,AAAIM,AAAMD;AAL7B,AAME,AAAAW,AAAA,AAAA,AAAA,AAAA,AAAsB,AAAKX,AACzB,AAAAW,AAAA,AAAA,AACE,AAAAA,AAAA,AAAA,AAAO,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AACYF,AAEA,AAACG,AAAQL,AACT,AAAKM;AAAL,AACE,AAAMC,AAAE,AAACC,AAAIN;AAAb,AACE,AAACO,AAAiBnB,AAAIE,AAAEe;;AACxB,AAACG,AAAoBpB,AAAIE,AAAEe;AATvD,AACE,AACE,AAQSZ,AACT,AAAAQ,AAAA,AAAA,AAAA,AAAOL","names":["p__89138","map__89139","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","com.fulcrologic.rad.rendering.semantic-ui.boolean-field/render-field","form-instance","env","attribute","k","props","com.fulcrologic.fulcro.components/props","user-props","com.fulcrologic.rad.options_util._QMARK__BANG_","com.fulcrologic.rad.form/field-style-config","field-label","com.fulcrologic.rad.form/field-label","read-only?","com.fulcrologic.rad.form/read-only?","value","com.fulcrologic.fulcro.dom.macro_create_element","cljs.core.merge","cljs.core/boolean","evt","v","cljs.core/not","com.fulcrologic.rad.form/input-blur!","com.fulcrologic.rad.form/input-changed!"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.boolean-field\n  (:require\n    #?(:cljs\n       [com.fulcrologic.fulcro.dom :as dom :refer [div label input]]\n       :clj\n       [com.fulcrologic.fulcro.dom-server :as dom :refer [div label input]])\n    [com.fulcrologic.rad.attributes :as attr]\n    [com.fulcrologic.fulcro.components :as comp]\n    [clojure.string :as str]\n    [com.fulcrologic.rad.form :as form]\n    [com.fulcrologic.rad.options-util :refer [?!]]\n    [com.fulcrologic.fulcro.dom.events :as evt]))\n\n(defn render-field [{::form/keys [form-instance] :as env} attribute]\n  (let [k           (::attr/qualified-key attribute)\n        props       (comp/props form-instance)\n        user-props  (?! (form/field-style-config env attribute :input/props) env)\n        field-label (form/field-label env attribute)\n        read-only?  (form/read-only? form-instance attribute)\n        value       (get props k false)]\n    (div :.ui.field {:key (str k)}\n      (div :.ui.checkbox\n        (input (merge\n                 {:checked  value\n                  :type     \"checkbox\"\n                  :disabled (boolean read-only?)\n                  :onChange (fn [evt]\n                              (let [v (not value)]\n                                (form/input-blur! env k v)\n                                (form/input-changed! env k v)))}\n                 user-props))\n        (label field-label)))))\n\n"]}