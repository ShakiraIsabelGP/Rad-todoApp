{"version":3,"sources":["com/fulcrologic/fulcro/networking/file_upload.cljs"],"mappings":"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","names":["var_args","G__71564","com.fulcrologic.fulcro.networking.file-upload/new-upload","js/Error","name","content","com.fulcrologic.fulcro.networking.file_upload.new_upload","content-type","G__71565","cljs.core/with-meta","cljs.core.assoc","G__71567","com.fulcrologic.fulcro.networking.file-upload/evt->uploads","file-input-change-event","js-file-list","cljs.core.mapv","file-idx","js-file","cljs.core.range","com.fulcrologic.fulcro.networking.file_upload.evt__GT_uploads","com.fulcrologic.fulcro.networking.file-upload/attach-uploads","params","objects-to-upload","com.fulcrologic.fulcro.networking.file-upload/has-uploads?","req","mutations","G__71568","edn-query-language.core/query->ast","mutation-with-upload","cljs.core/some","p__71569","map__71570","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","cljs.core/contains?","cljs.core/boolean","com.fulcrologic.fulcro.networking.file-upload/js-value->uploadable-object","v","G__71572","js/Blob","G__71575","com.fulcrologic.fulcro.networking.file-upload/wrap-file-upload","handler","com.fulcrologic.fulcro.networking.file_upload.wrap_file_upload","transit-options","e71576","vec__71577","cljs.core.nth","body","response-type","com.fulcrologic.fulcro.networking.http-remote/desired-response-type","ast","ast-to-send","p1__71573#","cljs.core.update","n","cljs.core/dissoc","txn","edn-query-language.core/ast->query","form","js/FormData","com.fulcrologic.fulcro.algorithms.transit.transit_clj__GT_str","seq__71580","cljs.core/seq","chunk__71581","count__71582","i__71583","map__71621","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__71639","cljs.core/first","cljs.core/next","dispatch-key","uploads","seq__71623","chunk__71624","count__71625","i__71626","map__71633","map__71636","seq__71641","chunk__71642","count__71643","i__71644","map__71652","map__71657","name-with-mutation","js-value","cljs.core/meta","G__71635","G__71638","G__71655","G__71659","e","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay"],"sourcesContent":["(ns com.fulcrologic.fulcro.networking.file-upload\n  \"Client-side middleware that can be used with HTTP remotes so that mutations can attach file uploads to mutation\n   parameters.\"\n  (:require\n    [edn-query-language.core :as eql]\n    [com.fulcrologic.guardrails.core :refer [>defn => >def]]\n    [com.fulcrologic.fulcro.algorithms.transit :as t]\n    [com.fulcrologic.fulcro.networking.http-remote :as http]\n    [taoensso.timbre :as log]))\n\n(defn new-upload\n  \"Create a new upload object from a string name and a js object (Blob, ArrayBuffer, or File). The resulting map is\n  safe to store in app state. If `content-type` is supplied then the file upload support will attempt to force the\n  content type to the one provided. Normally js File objects will auto-set their MIME type, but this can sometimes be\n  mis-interpreted by server MIME configurations.\n\n  See `attach-uploads`.\"\n  ([name content] (new-upload name content nil))\n  ([name content content-type]\n   (cond-> {:file/name    name\n            :file/content (with-meta {} {:js-value content})}\n     content-type (assoc :file/content-type content-type))))\n\n(defn evt->uploads\n  \"Converts a file input onChange event into a sequence upload objects that are compatible with `attach-uploads`.\n\n   If you want to manually set the content type of any item, then add a `:file/content-type` key/value pair to the\n   returned uploads (which are just clojure maps), or pass a content-type argument to have that content type applied\n   to ALL of the uploads.  NOTE: some server middleware can mis-interpret certain MIME types and open Readers on them\n   instead of byte streams, leading to file corruption of the uploaded file.  You can try forcing the MIME type to\n   `application/octet-stream` to overcome this.\"\n  ([file-input-change-event content-type]\n   (let [js-file-list (.. file-input-change-event -target -files)]\n     (mapv (fn [file-idx]\n             (let [js-file (.item js-file-list file-idx)\n                   name    (.-name js-file)]\n               (new-upload name js-file content-type)))\n       (range (.-length js-file-list)))))\n  ([file-input-change-event]\n   (evt->uploads file-input-change-event nil)))\n\n(defn attach-uploads\n  \"Attach js Blob or ArrayBuffer objects to the `params`. This requires that you use `http-remote` and that you\n   also install `wrap-file-upload` middleware. If you use js/File objects then the filenames of those objects\n   will be available to the mutations on the server.\n\n   Example usage:\n\n   ```\n   (let [uploads [(file-upload/new-upload \\\"test\\\" some-js-file)\n                  (file-upload/new-upload \\\"other\\\" other-js-file)]]\n     (comp/transact! this [(some-mutation (attach-uploads {} uploads))]))\n   ```\n\n   If you are using a browser file input, you can use `evt->uploads`:\n\n   ```\n   (dom/input {:type \\\"file\\\"\n               :multiple true\n               :onChange (fn [evt]\n                           (let [uploads (file-upload/evt->uploads evt)]\n                             (comp/transact! this [(some-mutation (file-upload/attach-uploads {} uploads))])))})\n   ```\n   \"\n  [params objects-to-upload]\n  (assoc params ::uploads objects-to-upload))\n\n(defn- has-uploads? [req]\n  (let [mutations            (some-> req :body eql/query->ast :children)\n        mutation-with-upload (some (fn [{:keys [params]}]\n                                     (contains? params ::uploads)) mutations)]\n    (boolean mutation-with-upload)))\n\n(defn- js-value->uploadable-object\n  \"Coerce the js object into a blob to ensure it can be uploaded.\"\n  [v content-type]\n  (cond-> (if (instance? js/Blob v) v (js/Blob #js [v]))\n    content-type (.slice 0 (.-size v) content-type)))\n\n(defn wrap-file-upload\n  \"Adds support for attaching uploads to the parameters of any mutation.\n\n   `transit-options` - A map of options to be included when converting the mutation and params for transmission. See\n                       `transit/transit-clj->str`. Use this to extend the transit support. This is necessary because\n                       the regular request middleware will not be used to send transactions that include file uploads,\n                       so any extensions to transit must be done in both places.\n\n   NOTE: This middleware acts as the end of the chain when it detects the need for a file upload, and rewrites the body,\n   method, and clears any content-type header. As such, it should be used in the middleware so that it will be executed\n   first:\n\n   ```\n   (def client-middleware\n     (->\n       (net/wrap-fulcro-request)\n       (file-upload/wrap-file-upload)\n       ...))\n   ```\n   \"\n  ([handler]\n   (wrap-file-upload handler {}))\n  ([handler transit-options]\n   (fn [req]\n     (if (has-uploads? req)\n       (try\n         (let [[body response-type] (http/desired-response-type req)\n               ast         (eql/query->ast body)\n               ast-to-send (update ast :children #(mapv (fn [n] (update n :params dissoc ::uploads)) %))\n               txn         (eql/ast->query ast-to-send)\n               form        (js/FormData.)]\n           (.append form \"upload-transaction\" (t/transit-clj->str txn (assoc transit-options :metadata? false)))\n           (doseq [{:keys [dispatch-key params]} (:children ast)]\n             (when-let [uploads (::uploads params)]\n               (doseq [{:file/keys [name content content-type]} uploads]\n                 (let [name-with-mutation (str dispatch-key \"|\" name)\n                       js-value           (-> content meta :js-value)\n                       content            (some-> js-value (js-value->uploadable-object content-type))]\n                   (.append form \"files\" content name-with-mutation)))))\n           (-> req\n             (assoc :body form :method :post :response-type response-type)\n             (update :headers dissoc \"Content-Type\")))\n         (catch :default e\n           (log/error e \"Exception while converting mutation with file uploads. See https://book.fulcrologic.com/#err-fu-mut-convert-exc\")\n           {:body   nil\n            :method :post}))\n       (handler req)))))\n"]}