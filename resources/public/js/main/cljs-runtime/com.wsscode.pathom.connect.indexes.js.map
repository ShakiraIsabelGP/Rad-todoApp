{"version":3,"sources":["com/wsscode/pathom/connect/indexes.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/symbol?","cljs.spec.alpha.every_impl","G__80768","cljs.core/set?","cljs.spec.alpha.tuple_impl","G__80769","cljs.core/map?","i__19036__auto__","v__19037__auto__","cljs.core.nth","com.wsscode.pathom.connect.indexes/resolver-data","env-or-indexes","sym","idx","G__80770","cljs.core/contains?","cljs.core.get_in","p__80771","map__80772","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","com.wsscode.pathom.connect.indexes/resolver-provides","provides","output","or__4126__auto__","com.wsscode.pathom.connect.indexes/normalize-io","com.wsscode.pathom.connect.indexes/merge-io-attrs","a","b","cljs.core.merge_with","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","map__80778","retspec80775","argspec80774","com.fulcrologic.guardrails.core/run-check","f80777","p__80780","vec__80781","vec__80785","ret80776","unions","cljs.core.into","cljs.core.map","k","v","merged","cljs.core.reduce","cljs.core/vals","cljs.core.assoc","x","cljs.core/first","var_args","G__80791","com.wsscode.pathom.connect.indexes/merge-io","js/Error","com.wsscode.pathom.connect.indexes/io->query","io","p__80795","vec__80796","cljs.core/seq","com.wsscode.pathom.connect.indexes/merge-oir","p1__80799#","p2__80800#","cljs.core/into","map__80805","retspec80802","argspec80801","f80804","G__80808","G__80809","ret80803","com.wsscode.pathom.connect.indexes/sub-select-io","io-map","mask","cljs.core/reduce-kv","m","p__80814","map__80815","map__80817","argspec80810","retspec80811","f80813","p__80819","map__80820","p__80822","map__80823","temp__5733__auto__","ret80812","com.wsscode.pathom.connect.indexes/sub-select-ast","children","ast","key","node","sub","cljs.core.update","cljs.core/conj","cljs.core.dissoc"],"sourcesContent":["(ns com.wsscode.pathom.connect.indexes\n  (:require\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.guardrails.core :refer [>def >defn >fdef => | <- ?]]\n    [com.wsscode.pathom.core :as p]))\n\n(>def :com.wsscode.pathom.connect/sym symbol?)\n(>def :com.wsscode.pathom.connect/attribute ::p/attribute)\n(>def :com.wsscode.pathom.connect/attributes-set (s/coll-of ::p/attribute :kind set?))\n(>def :com.wsscode.pathom.connect/io-map (s/map-of :com.wsscode.pathom.connect/attribute :com.wsscode.pathom.connect/io-map))\n\n(declare normalize-io)\n\n(defn resolver-data\n  \"Get resolver map information in env from the resolver sym.\"\n  [env-or-indexes sym]\n  (let [idx (cond-> env-or-indexes\n              (contains? env-or-indexes :com.wsscode.pathom.connect/indexes)\n              :com.wsscode.pathom.connect/indexes)]\n    (get-in idx [:com.wsscode.pathom.connect/index-resolvers sym])))\n\n(defn resolver-provides\n  [{:com.wsscode.pathom.connect/keys [provides output]}]\n  (or provides\n      (if output (normalize-io output))))\n\n; region io map\n\n(defn merge-io-attrs [a b]\n  (cond\n    (and (map? a) (map? b))\n    (merge-with merge-io-attrs a b)\n\n    (map? a) a\n    (map? b) b\n\n    :else b))\n\n(>defn normalize-io\n  \"Convert pathom output format into io/provides format.\"\n  [output]\n  [:com.wsscode.pathom.connect/output\n   => :com.wsscode.pathom.connect/io-map]\n  (if (map? output) ; union\n    (let [unions (into {} (map (fn [[k v]]\n                                 [k (normalize-io v)]))\n                       output)\n          merged (reduce merge-io-attrs (vals unions))]\n      (assoc merged :com.wsscode.pathom.connect/unions unions))\n    (into {} (map (fn [x] (if (map? x)\n                            (let [[k v] (first x)]\n                              [k (normalize-io v)])\n                            [x {}])))\n          output)))\n\n(defn merge-io\n  \"Merge ::p/shape-descriptor maps.\"\n  ([] {})\n  ([a] a)\n  ([a b]\n   (merge-with merge-io-attrs a b)))\n\n(defn io->query\n  \"Converts IO format to query format.\"\n  [io]\n  (into []\n        (map (fn [[k v]]\n               (if (seq v)\n                 {k (io->query v)}\n                 k)))\n        io))\n\n(defn merge-oir\n  \"Merge ::index-oir maps.\"\n  [a b]\n  (merge-with #(merge-with into % %2) a b))\n\n(>defn sub-select-io\n  \"Given io-map, filters the parts of it that are also contained in mask.\"\n  [io-map mask]\n  [:com.wsscode.pathom.connect/io-map :com.wsscode.pathom.connect/io-map\n   => :com.wsscode.pathom.connect/io-map]\n  (reduce-kv\n    (fn [m k v]\n      (if (contains? io-map k)\n        (assoc m k (if (seq v) (sub-select-io (get io-map k) v) v))\n        m))\n    {}\n    mask))\n\n(>defn sub-select-ast\n  \"Given an ast and a io-map mask, returns the parts of AST that match the mask.\"\n  [{:keys [children] :as ast} mask]\n  [:edn-query-language.ast/node :com.wsscode.pathom.connect/io-map\n   => :edn-query-language.ast/node]\n  (if (seq children)\n    (reduce\n      (fn [ast {:keys [key] :as node}]\n        (if-let [sub (get mask key)]\n          (update ast :children conj\n            (if (:children node)\n              (if (seq sub)\n                (sub-select-ast node sub)\n                (-> node (assoc :type :prop) (dissoc :children)))\n              node))\n          ast))\n      (assoc ast :children [])\n      children)\n    ast))\n\n; endregion\n\n"]}