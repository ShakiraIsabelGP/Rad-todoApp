{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/text_field.cljc"],"mappings":"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","names":["p__62855","map__62856","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","com.fulcrologic.rad.rendering.semantic-ui.text-field/with-handlers","type","value","onChange","onBlur","props","cljs.core.assoc","or__4126__auto__","evt","G__62860","com.fulcrologic.fulcro.dom.events/target-value","G__62861","com.fulcrologic.rad.rendering.semantic-ui.text-field/text-input","com.fulcrologic.fulcro.dom.macro_create_element","p__62862","map__62863","com.fulcrologic.rad.rendering.semantic-ui.text-field/password-input","options__50078__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__62872","com.fulcrologic.fulcro.components/props","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.text-field","js/com.fulcrologic.rad.rendering.semantic-ui.text-field.ViewablePasswordField","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.text-field/ViewablePasswordField","this","_","hidden?","com.fulcrologic.fulcro.components.get_state","com.fulcrologic.fulcro.components.set_state_BANG_","G__62874","G__62878","com.fulcrologic.rad.rendering.semantic-ui.text-field/render-field","com.fulcrologic.rad.rendering.semantic_ui.field.render_field_factory","com.fulcrologic.rad.rendering.semantic-ui.text-field/render-password","com.fulcrologic.rad.rendering.semantic-ui.text-field/render-viewable-password","com.fulcrologic.fulcro.components.factory","p__62879","map__62880","com.fulcrologic.rad.rendering.semantic-ui.text-field/render-dropdown","form-instance","env","attribute","map__62882","k","required?","values","com.fulcrologic.rad.form/field-style-config","input-props","com.fulcrologic.rad.options_util._QMARK__BANG_","options","cljs.core.mapv","v","and__4115__auto__","invalid?","cljs.core/contains?","validation-message","com.fulcrologic.rad.ui-validation/validation-error-message","field-label","com.fulcrologic.rad.form/field-label","read-only?","com.fulcrologic.rad.form/read-only?","G__62893","com.fulcrologic.rad.rendering.semantic-ui.components/ui-wrapped-dropdown","cljs.core.merge","cljs.core/not","com.fulcrologic.rad.form/input-changed!","com.fulcrologic.rad.rendering.semantic-ui.text-field/render-multi-line","p__62894","map__62895","G__62901","G__62902"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.text-field\n  (:require\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    #?(:cljs [com.fulcrologic.fulcro.dom :refer [div label input textarea]]\n       :clj  [com.fulcrologic.fulcro.dom-server :refer [div label input textarea]])\n    [com.fulcrologic.fulcro.dom.events :as evt]\n    [com.fulcrologic.rad.form :as form]\n    [com.fulcrologic.rad.attributes :as attr]\n    [com.fulcrologic.rad.ui-validation :as validation]\n    [com.fulcrologic.rad.options-util :refer [?!]]\n    [com.fulcrologic.rad.rendering.semantic-ui.components :refer [ui-wrapped-dropdown]]\n    [com.fulcrologic.rad.rendering.semantic-ui.field :refer [render-field-factory]]))\n\n(defn- with-handlers [type {:keys [value onChange onBlur] :as props}]\n  (assoc props\n    :value (or value \"\")\n    :type type\n    :onBlur (fn [evt]\n              (when onBlur\n                (onBlur (evt/target-value evt))))\n    :onChange (fn [evt]\n                (when onChange\n                  (onChange (evt/target-value evt))))))\n\n(defn- text-input [props] (input (with-handlers \"text\" props)))\n(defn- password-input [{:keys [value onChange onBlur] :as props}] (input (with-handlers \"password\" props)))\n\n(defsc ViewablePasswordField [this {:keys [value onChange onBlur] :as props}]\n  {:initLocalState (fn [_] {:hidden? true})}\n  (let [hidden? (comp/get-state this :hidden?)]\n    (input (assoc props\n             :value (if hidden? \"*******\" (or value \"\"))\n             :type \"text\"\n             :onBlur (fn [evt]\n                       (comp/set-state! this {:hidden? true})\n                       (when onBlur\n                         (onBlur (evt/target-value evt))))\n             :onFocus (fn [_] (comp/set-state! this {:hidden? false}))\n             :onChange (fn [evt]\n                         (when onChange\n                           (onChange (evt/target-value evt))))))))\n\n(def render-field (render-field-factory text-input))\n(def render-password (render-field-factory password-input))\n(def render-viewable-password (render-field-factory (comp/factory ViewablePasswordField)))\n\n(defn render-dropdown [{::form/keys [form-instance] :as env} attribute]\n  (let [{k           ::attr/qualified-key\n         ::attr/keys [required?]} attribute\n        values             (form/field-style-config env attribute :sorted-set/valid-values)\n        input-props        (?! (form/field-style-config env attribute :input/props) env)\n        options            (mapv (fn [v] {:text v :value v}) values)\n        props              (comp/props form-instance)\n        value              (and attribute (get props k))\n        invalid?           (not (contains? values value))\n        validation-message (when invalid? (validation/validation-error-message env attribute))\n        field-label        (form/field-label env attribute)\n        read-only?         (form/read-only? form-instance attribute)]\n    (div :.ui.field {:key (str k)}\n      (label field-label (when invalid? (str \" (\" validation-message \")\")))\n      (ui-wrapped-dropdown\n        (merge\n          {:disabled  read-only?\n           :options   options\n           :clearable (not required?)\n           :value     value\n           :onChange  (fn [v] (form/input-changed! env k v))}\n          input-props)))))\n\n(def render-multi-line\n  (render-field-factory (fn [{:keys [value onChange onBlur] :as props}]\n                          (textarea (assoc props\n                                      :value (or value \"\")\n                                      :onBlur (fn [evt]\n                                                (when onBlur\n                                                  (onBlur (evt/target-value evt))))\n                                      :onChange (fn [evt]\n                                                  (when onChange\n                                                    (onChange (evt/target-value evt)))))))))\n"]}