{"version":3,"sources":["com/fulcrologic/fulcro/algorithms/transit.cljc"],"mappings":"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","names":["js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro","js/com.fulcrologic.fulcro.algorithms","js/com.fulcrologic.fulcro.algorithms.transit","js/com.fulcrologic.fulcro.algorithms.transit.transit-handlers","com.fulcrologic.fulcro.algorithms.transit/transit-handlers","cljs.core.atom","com.fulcrologic.fulcro.algorithms.transit/read-handlers","cljs.core/deref","cljs.core.get","com.fulcrologic.fulcro.algorithms.transit/write-handlers","var_args","G__49191","com.fulcrologic.fulcro.algorithms.transit/writer","js/Error","com.fulcrologic.fulcro.algorithms.transit.writer","opts","cognitect.transit.writer","cljs.core.update","cljs.core/merge","G__49197","com.fulcrologic.fulcro.algorithms.transit/reader","com.fulcrologic.fulcro.algorithms.transit.reader","cognitect.transit.reader","com.fulcrologic.fulcro.algorithms.transit/serializable?","v","e49203","e","G__49205","com.fulcrologic.fulcro.algorithms.transit/transit-clj->str","data","com.fulcrologic.fulcro.algorithms.transit.transit_clj__GT_str","write-meta","cognitect.transit/write-meta","G__49206","cljs.core.dissoc","and__4115__auto__","cljs.core.assoc","cognitect.transit/write","G__49214","com.fulcrologic.fulcro.algorithms.transit/transit-str->clj","str","com.fulcrologic.fulcro.algorithms.transit.transit_str__GT_clj","cognitect.transit/read","cljs.spec.alpha/def-impl","cljs.core/map?","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/map-spec-impl","G__49320","cljs.core/contains?","map__49321","G__49322","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","argspec49316","retspec49317","com.fulcrologic.guardrails.core/run-check","f49319","ret49318","com.fulcrologic.fulcro.algorithms.transit/type-handler","type","tag","type->ground","ground->type","cljs.core/any?","cljs.core/string?","cljs.core/fn?","cognitect.transit.write_handler","_","t","r","cognitect.transit/read-handler","G__49328","map__49329","G__49330","retspec49325","argspec49324","f49327","ret49326","com.fulcrologic.fulcro.algorithms.transit/install-type-handler!","cljs.core/nil?","cljs.core.swap_BANG_","m","js/com.fulcrologic.fulcro.algorithms.transit.install-tempid-handler","com.fulcrologic.fulcro.algorithms.transit/install-tempid-handler","com.fulcrologic.fulcro.algorithms.tempid/TempId","com.fulcrologic.fulcro.algorithms.tempid/tag","tid","uuid","com.fulcrologic.fulcro.algorithms.tempid.tempid"],"sourcesContent":["(ns com.fulcrologic.fulcro.algorithms.transit\n  \"Transit functions for the on-the-wire EDN communication to common remotes. Includes support for Fulcro tempids,\n   and can be extended to support additional application-specific data types.\"\n  #?(:clj\n     (:refer-clojure :exclude [ref]))\n  (:require\n    [cognitect.transit :as t]\n    [com.fulcrologic.guardrails.core :refer [>defn =>]]\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid #?@(:cljs [:refer [TempId]])])\n  #?(:clj\n     (:import [com.cognitect.transit\n               TransitFactory WriteHandler ReadHandler]\n              [com.fulcrologic.fulcro.algorithms.tempid TempId])))\n\n\n(defonce transit-handlers\n  (atom\n    {:writers {}\n     :readers {}}))\n\n(defn read-handlers\n  \"Returns a map that can be used for the :handlers key of a transit reader, taken from the current type handler registry.\"\n  []\n  (get @transit-handlers :readers {}))\n\n(defn write-handlers\n  \"Returns a map that can be used for the :handlers key of a transit writer, taken from the current type handler registry.\"\n  []\n  (get @transit-handlers :writers {}))\n\n\n#?(:cljs\n   (defn writer\n     \"Create a transit writer.\n\n     - `out`: An acceptable output for transit writers.\n     - `opts`: (optional) options to pass to `cognitect.transit/writer` (such as handlers).\"\n     ([] (writer {}))\n     ([opts] (t/writer :json (update opts :handlers merge (write-handlers))))))\n\n#?(:clj\n   (defn writer\n     \"Create a transit writer.\n\n     - `out`: An acceptable output for transit writers.\n     - `opts`: (optional) options to pass to `cognitect.transit/writer` (such as data type handlers).\"\n     ([out] (writer out {}))\n     ([out opts] (t/writer out :json (update opts :handlers merge (write-handlers))))))\n\n#?(:cljs\n   (defn reader\n     \"Create a transit reader.\n\n     - `opts`: (optional) options to pass to `cognitect.transit/reader` (such as data type handlers).\"\n     ([] (reader {}))\n     ([opts] (t/reader :json (update opts :handlers merge (read-handlers))))))\n\n#?(:clj\n   (defn reader\n     \"Create a transit reader.\n\n     - `opts`: (optional) options to pass to `cognitect.transit/reader` (such as data type handlers).\"\n     ([in] (reader in {}))\n     ([in opts] (t/reader in :json (-> opts (update :handlers merge (read-handlers)))))))\n\n(defn serializable?\n  \"Checks to see that the value in question can be serialized by the default fulcro writer by actually attempting to\n  serialize it.  This is *not* an efficient check.\"\n  [v]\n  #?(:clj  (try\n             (.write (writer (java.io.ByteArrayOutputStream.)) v)\n             true\n             (catch Exception e false))\n     :cljs (try\n             (.write (writer) v)\n             true\n             (catch :default e false))))\n\n(defn transit-clj->str\n  \"Use transit to encode clj data as a string. Useful for encoding initial app state from server-side rendering.\n\n  - `data`: Arbitrary data\n  - `opts`: (optional) Options to send when creating a `writer`. Always preserves metadata. Adding :metadata? true/false\n    will turn on/off metadata support. Defaults to on.\"\n  ([data] (transit-clj->str data {}))\n  ([data opts]\n   ;; Support for Datomic Cloud, which uses an older version of transit with no write-meta\n   (let [write-meta #?(:cljs t/write-meta\n                       :clj (resolve `t/write-meta))\n         opts               (cond-> (dissoc opts :metadata?)\n                              (and write-meta (not (false? (:metadata? opts)))) (assoc :transform write-meta))]\n     #?(:cljs (t/write (writer opts) data)\n        :clj\n              (with-open [out (java.io.ByteArrayOutputStream.)]\n                (t/write (writer out opts) data)\n                (.toString out \"UTF-8\"))))))\n\n(defn transit-str->clj\n  \"Use transit to decode a string into a clj data structure. Useful for decoding initial app state\n   when starting from a server-side rendering.\"\n  ([str] (transit-str->clj str {}))\n  ([str opts]\n   #?(:cljs (t/read (reader opts) str)\n      :clj  (t/read (reader (java.io.ByteArrayInputStream. (.getBytes str \"UTF-8\")) opts)))))\n\n(s/def ::reader map?)\n(s/def ::writer map?)\n\n(>defn type-handler\n  \"Creates a map that can be registered with Fulcro's transit support.\n\n   * `type` is a `deftype` or `defrecord` that represents your runtime data that you want to support in Transit\n   * `tag` is a string that uniquely identifies your type on the wire\n   * `type->ground` is a function that can take an instance of your `type` and turn it into something transit already\n   knows how to handle.\n   * `ground->type` is a function that can take whatever `type->ground` generated and turn it back into your `type`.\n\n   This function returns a map that contains a :reader and :writer key. The value at these keys is suitable for merging\n   at the `:handlers` key of a reader or writer's option map.\n\n   See also `install-type-handler!` for adding this to Fulcro's registry of type support.\"\n  [type tag type->ground ground->type]\n  [any? string? fn? fn? => (s/keys :req-un [::reader ::writer])]\n  {:writer {type (t/write-handler\n                   (fn [_] tag)\n                   (fn [t] (type->ground t))\n                   (fn [r] (str tag \"#\" r)))}\n   :reader {tag (t/read-handler ground->type)}})\n\n(>defn install-type-handler!\n  \"Install a type handler (generated by `type-handler`) into the global Fulcro transit support registry. This registry\n   can be used by any Fulcro-aware facility that needs to use transit for any standard purpose where app-specific type\n   support is desired.\"\n  [t]\n  [(s/keys :req-un [::reader ::writer]) => nil?]\n  (swap! transit-handlers (fn [m]\n                            (-> m\n                              (update :readers merge (:reader t))\n                              (update :writers merge (:writer t)))))\n  nil)\n\n(defonce install-tempid-handler\n  (install-type-handler! (type-handler TempId tempid/tag\n                           (fn [^TempId tid] (.-id tid))\n                           (fn [uuid] (tempid/tempid uuid)))))\n"]}