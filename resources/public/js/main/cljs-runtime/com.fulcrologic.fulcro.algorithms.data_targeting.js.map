{"version":3,"sources":["com/fulcrologic/fulcro/algorithms/data_targeting.cljc"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.core/vector?","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","cljs.spec.alpha/rep-impl","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","com.fulcrologic.fulcro.algorithms.data-targeting/multiple-targets","map__51460","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","argspec51455","cljs.core.get","retspec51456","com.fulcrologic.guardrails.core/run-check","f51458","ret51457","cljs.core/map?","cljs.core/concat","cljs.core/last","cljs.core/seq","seq51459","self__4724__auto__","targets","cljs.core/with-meta","cljs.core/vec","map__51466","argspec51462","retspec51463","f51465","ret51464","com.fulcrologic.fulcro.algorithms.data-targeting/prepend-to","target","map__51472","argspec51468","retspec51469","f51471","ret51470","com.fulcrologic.fulcro.algorithms.data-targeting/append-to","map__51478","retspec51475","argspec51474","f51477","ret51476","com.fulcrologic.fulcro.algorithms.data-targeting/replace-at","map__51484","retspec51481","argspec51480","f51483","ret51482","com.fulcrologic.fulcro.algorithms.data-targeting/replacement-target?","t","cljs.core/any?","cljs.core/boolean?","cljs.core/meta","cljs.core/boolean","map__51490","retspec51487","argspec51486","f51489","ret51488","com.fulcrologic.fulcro.algorithms.data-targeting/prepend-target?","map__51496","argspec51492","retspec51493","f51495","ret51494","com.fulcrologic.fulcro.algorithms.data-targeting/append-target?","map__51502","argspec51498","retspec51499","f51501","ret51500","com.fulcrologic.fulcro.algorithms.data-targeting/multiple-targets?","map__51508","retspec51505","argspec51504","f51507","ret51506","com.fulcrologic.fulcro.algorithms.data-targeting/special-target?","clojure.set.intersection","cljs.core/keys","cljs.core/set","cljs.spec.alpha/or-spec-impl","com.fulcrologic.fulcro.algorithms.data-targeting/integrate-ident*","map__51519","argspec51512","retspec51513","f51515","p__51521","vec__51522","cljs.core.nth","p1__51510#","G__51525","cljs.core/Keyword","p1__51511#","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","ret51514","seq51516","G__51517","cljs.core/first","cljs.core/next","G__51518","self__4723__auto__","state","ident","named-parameters","actions","cljs.core.partition","cljs.core.reduce","command","data-path","already-has-ident-at-path?","cljs.core/some","cljs.core._EQ_","cljs.core.get_in","cljs.core.update_in","cljs.core.into","cljs.core.fnil","cljs.core/conj","path-to-vector","cljs.core/butlast","to-many?","index","vector","cljs.core/contains?","cljs.core/assoc-in","G__51536","com.fulcrologic.fulcro.algorithms.data-targeting/process-target","js/Error","map__51537","retspec51528","argspec51527","f51530","ret51529","map__51539","retspec51532","argspec51531","f51534","G__51542","G__51543","and__4115__auto__","ret51533","state-map","source-path","cljs.core/keyword?","edn-query-language.core/ident?","com.fulcrologic.fulcro.algorithms.data_targeting.process_target","remove-source?","item-to-place","many-idents?","cljs.core/every?","s","process-target-impl","target-has-many?","v","cljs.core.concat","com.fulcrologic.fulcro.algorithms.data_targeting.integrate_ident_STAR_","cljs.core.dissoc","taoensso.encore/dissoc-in"],"sourcesContent":["(ns com.fulcrologic.fulcro.algorithms.data-targeting\n  \"The implementation of processing load/mutation result graph targeting.\"\n  (:require\n    [clojure.set :as set]\n    [clojure.spec.alpha :as s]\n    [com.fulcrologic.guardrails.core :as gw :refer [>defn => >def]]\n    [edn-query-language.core :as eql]\n    [taoensso.encore :as enc]\n    [taoensso.timbre :as log]))\n\n(>def ::target vector?)\n\n(>defn multiple-targets\n  \"Specifies a target that should place edges in the graph at multiple locations.\n\n  `targets` - Any number of targets.  A target can be a simple path (as a vector), or other\n  special targets like `append-to` and `prepend-to`.\"\n  [& targets]\n  [(s/* ::target) => ::target]\n  (with-meta (vec targets) {::multiple-targets true}))\n\n(>defn prepend-to\n  \"Specifies a to-many target that will preprend an edge to some to-many edge. NOTE: this kind of target will not\n  create duplicates in the target list.\n\n  `target` - A vector (path) in the normalized database of the to-many list of idents.\n  \"\n  [target]\n  [::target => ::target]\n  (with-meta target {::prepend-target true}))\n\n(>defn append-to\n  \"Specifies a to-many target that will append an edge to some to-many edge. NOTE: this kind of target will not\n  create duplicates in the target list.\n\n  `target` - A vector (path) in the normalized database of the to-many list of idents.\"\n  [target]\n  [::target => ::target]\n  (with-meta target {::append-target true}))\n\n(>defn replace-at\n  \"Specifies a target that will replace an edge at some normalized location.\n\n  `target` - A vector (path) in the normalized database. This path can include numbers to target some element\n  of an existing to-many list of idents.\"\n  [target]\n  [::target => ::target]\n  (with-meta target {::replace-target true}))\n\n(>defn replacement-target? [t] [any? => boolean?] (-> t meta ::replace-target boolean))\n(>defn prepend-target? [t] [any? => boolean?] (-> t meta ::prepend-target boolean))\n(>defn append-target? [t] [any? => boolean?] (-> t meta ::append-target boolean))\n(>defn multiple-targets? [t] [any? => boolean?] (-> t meta ::multiple-targets boolean))\n\n(>defn special-target?\n  \"Is the given target special? This means it is not just a plain vector path, but is instead something like\n  an append.\"\n  [target]\n  [any? => boolean?]\n  (boolean (seq (set/intersection (-> target meta keys set) #{::replace-target ::append-target ::prepend-target ::multiple-targets}))))\n\n(>defn integrate-ident*\n  \"Integrate an ident into any number of places in the app state. This function is safe to use within mutation\n  implementations as a general helper function.\n\n  The named parameters can be specified any number of times. They are:\n\n  - append:  A vector (path) to a list in your app state where this new object's ident should be appended. Will not append\n  the ident if that ident is already in the list.\n  - prepend: A vector (path) to a list in your app state where this new object's ident should be prepended. Will not place\n  the ident if that ident is already in the list.\n  - replace: A vector (path) to a specific location in app-state where this object's ident should be placed. Can target a to-one or to-many.\n   If the target is a vector element index then that element must already exist in the vector.\n\n  NOTE: `ident` does not have to be an ident if you want to place denormalized data.  It can really be anything.\n\n  Returns the updated state map.\"\n  [state ident & named-parameters]\n  [map? any? (s/* (s/or :path ::target :command #{:append :prepend :replace})) => map?]\n  (let [actions (partition 2 named-parameters)]\n    (reduce (fn [state [command data-path]]\n              (let [already-has-ident-at-path? (fn [data-path] (some #(= % ident) (get-in state data-path)))]\n                (case command\n                  :prepend (if (already-has-ident-at-path? data-path)\n                             state\n                             (update-in state data-path #(into [ident] %)))\n                  :append (if (already-has-ident-at-path? data-path)\n                            state\n                            (update-in state data-path (fnil conj []) ident))\n                  :replace (let [path-to-vector (butlast data-path)\n                                 to-many?       (and (seq path-to-vector) (vector? (get-in state path-to-vector)))\n                                 index          (last data-path)\n                                 vector         (get-in state path-to-vector)]\n                             (when-not (vector? data-path) (log/error \"Replacement path must be a vector. You passed: \" data-path \"See https://book.fulcrologic.com/#err-targ-repl-path-not-vec\"))\n                             (when to-many?\n                               (cond\n                                 (not (vector? vector)) (log/error \"Path for replacement must be a vector. See https://book.fulcrologic.com/#err-targ-multi-repl-must-be-vec\")\n                                 (not (number? index)) (log/error \"Path for replacement must end in a vector index. See https://book.fulcrologic.com/#err-targ-multi-repl-must-end-with-idx\")\n                                 (not (contains? vector index)) (log/error \"Target vector for replacement does not have an item at index \" index \". See https://book.fulcrologic.com/#err-targ-multi-repl-no-such-idx\")))\n                             (assoc-in state data-path ident))\n                  state)))\n      state actions)))\n\n(>defn process-target\n  \"Process a load target (which can be a multiple-target).\n\n  `state-map` - the state-map\n  `source-path` - A keyword, ident, or app-state path.  If the source path is an ident, then that is what is placed\n     in app state.  If it is a keyword or longer path then the thing at that location in app state is pulled from app state\n     and copied to the target location(s).\n  `target` - The target(s)\n  `remove-source?` - When true the source will be removed from app state once it has been written to the new location.\n\n  Returns an updated state-map with the given changes.\"\n  ([state-map source-path target]\n   [map? (s/or :key keyword? :ident eql/ident? :path vector?) ::target => map?]\n   (process-target state-map source-path target true))\n  ([state-map source-path target remove-source?]\n   [map? (s/or :key keyword? :ident eql/ident? :path vector?) ::target boolean? => map?]\n   (letfn [(process-target-impl [state-map source-path target]\n             (let [item-to-place (cond (eql/ident? source-path) source-path\n                                       (keyword? source-path) (get state-map source-path)\n                                       :else (get-in state-map source-path))\n                   many-idents?  (and (vector? item-to-place)\n                                   (every? eql/ident? item-to-place))]\n               (cond\n                 (and (eql/ident? source-path) (not (special-target? target)))\n                 (assoc-in state-map target item-to-place)\n\n                 (not (special-target? target))\n                 (assoc-in state-map target item-to-place)\n\n                 (multiple-targets? target)\n                 (reduce (fn [s t] (process-target-impl s source-path t)) state-map target)\n\n                 (and many-idents? (special-target? target))\n                 (let [state            state-map\n                       target-has-many? (vector? (get-in state target))]\n                   (if target-has-many?\n                     (cond\n                       (prepend-target? target) (update-in state target (fn [v] (vec (concat item-to-place v))))\n                       (append-target? target) (update-in state target (fn [v] (vec (concat v item-to-place))))\n                       (replacement-target? target) (assoc-in state target item-to-place)\n                       :else state)\n                     (assoc-in state target item-to-place)))\n\n                 (special-target? target)\n                 (cond-> state-map\n                   (prepend-target? target) (integrate-ident* item-to-place :prepend target)\n                   (append-target? target) (integrate-ident* item-to-place :append target)\n                   (replacement-target? target) (integrate-ident* item-to-place :replace target))\n\n                 :else (do\n                         (log/warn \"Target processing found an unsupported case. See https://book.fulcrologic.com/#warn-target-unsuported-case\")\n                         state-map))))]\n     (cond-> (process-target-impl state-map source-path target)\n       (and remove-source?\n            (keyword? source-path))\n       (dissoc source-path)\n       (and remove-source?\n           (not (eql/ident? source-path))\n           (vector? source-path))\n       (enc/dissoc-in source-path)))))\n"]}