{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/entity_picker.cljc"],"mappings":"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","names":["options__50078__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__62729","com.fulcrologic.fulcro.components/props","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.entity-picker","js/com.fulcrologic.rad.rendering.semantic-ui.entity-picker.ToOnePicker","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.entity-picker/ToOnePicker","this","env","attr","map__62727","form-instance","props","form-class","com.fulcrologic.fulcro.components/react-type","com.fulcrologic.rad.picker_options.load_options_BANG_","map__62731","map__62732","map__62733","map__62734","master-form","attributes","field-options","com.fulcrologic.fulcro.components/component-options","qualified-key","required?","target-id-key","cljs.core/first","cljs.core.keep","p__62738","map__62739","k","target","cljs.core._EQ_","cache-key","query-key","cljs.core.merge","or__4126__auto__","com.fulcrologic.rad.options_util._QMARK__BANG_","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","options","cljs.core.get_in","value","field-label","com.fulcrologic.rad.form/field-label","read-only?","com.fulcrologic.rad.form/read-only?","invalid?","com.fulcrologic.rad.ui-validation/invalid-attribute-value?","onSelect","v","com.fulcrologic.rad.form/input-changed!","com.fulcrologic.fulcro.dom.macro_create_element","js/tr","p1__62726#","cljs.core.filter","G__62742","com.fulcrologic.rad.rendering.semantic-ui.components/ui-wrapped-dropdown","G__62743","cljs.core/not","ui-to-one-picker","com.fulcrologic.fulcro.components.factory","p__62744","map__62745","com.fulcrologic.rad.rendering.semantic-ui.entity-picker/to-one-picker","attribute","G__62747","map__62751","js/com.fulcrologic.rad.rendering.semantic-ui.entity-picker.ToManyPicker","com.fulcrologic.rad.rendering.semantic-ui.entity-picker/ToManyPicker","map__62749","map__62753","visible?","com.fulcrologic.rad.form/field-visible?","map__62755","map__62756","map__62757","attr-field-options","p__62760","map__62761","style","current-selection","cljs.core.into","entity","temp__5735__auto__","id","validation-message","com.fulcrologic.rad.ui-validation/validation-error-message","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","G__62764","cljs.core.map","p__62765","map__62766","text","checked?","cljs.core/contains?","cljs.core/vec","cljs.core.conj","cljs.core.disj","com.fulcrologic.rad.rendering.semantic-ui.entity-picker/ui-to-many-picker","ui-to-many-picker","p__62768","map__62769","com.fulcrologic.rad.rendering.semantic-ui.entity-picker/to-many-picker","G__62771"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.entity-picker\n  (:require\n    #?(:cljs [com.fulcrologic.fulcro.dom :as dom :refer [div h3 button i span]]\n       :clj  [com.fulcrologic.fulcro.dom-server :as dom :refer [div h3 button i span]])\n    [com.fulcrologic.rad.rendering.semantic-ui.components :refer [ui-wrapped-dropdown]]\n    [com.fulcrologic.fulcro-i18n.i18n :refer [tr]]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.rad.form :as form]\n    [com.fulcrologic.rad.attributes :as attr]\n    [com.fulcrologic.rad.picker-options :as picker-options]\n    [com.fulcrologic.rad.ui-validation :as validation]\n    [com.fulcrologic.rad.options-util :refer [?!]]\n    [taoensso.timbre :as log]))\n\n(defsc ToOnePicker [this {:keys [env attr]}]\n  {:componentDidMount (fn [this]\n                        (let [{:keys [env attr]} (comp/props this)\n                              form-instance (::form/form-instance env)\n                              props         (comp/props form-instance)\n                              form-class    (comp/react-type form-instance)]\n                          (picker-options/load-options! form-instance form-class props attr)))}\n  (let [{::form/keys [master-form form-instance]} env\n        {::form/keys [attributes field-options]} (comp/component-options form-instance)\n        {::attr/keys [qualified-key required?]} attr\n        field-options (get field-options qualified-key)\n        target-id-key (first (keep (fn [{k ::attr/qualified-key ::attr/keys [target]}]\n                                     (when (= k qualified-key) target)) attributes))\n        {::picker-options/keys [cache-key query-key]} (merge attr field-options)\n        cache-key     (or (?! cache-key (comp/react-type form-instance) (comp/props form-instance)) query-key)\n        cache-key     (or cache-key query-key (log/error \"Ref field MUST have either a ::picker-options/cache-key or ::picker-options/query-key in attribute \" qualified-key))\n        props         (comp/props form-instance)\n        options       (get-in props [::picker-options/options-cache cache-key :options])\n        value         [target-id-key (get-in props [qualified-key target-id-key])]\n        field-label   (form/field-label env attr)\n        read-only?    (or (form/read-only? master-form attr) (form/read-only? form-instance attr))\n        invalid?      (and (not read-only?) (validation/invalid-attribute-value? env attr))\n        onSelect      (fn [v]\n                        (form/input-changed! env qualified-key v))]\n    (div :.ui.field {:classes [(when invalid? \"error\")]}\n      (dom/label field-label (when invalid? (str \" (\" (tr \"Required\") \")\")))\n      (if read-only?\n        (let [value (first (filter #(= value (:value %)) options))]\n          (:text value))\n        (ui-wrapped-dropdown (cond->\n                               {:onChange  (fn [v] (onSelect v))\n                                :value     value\n                                :clearable (not required?)\n                                :disabled  read-only?\n                                :options   options}))))))\n\n(let [ui-to-one-picker (comp/factory ToOnePicker {:keyfn (fn [{:keys [attr]}] (::attr/qualified-key attr))})]\n  (defn to-one-picker [env attribute]\n    (ui-to-one-picker {:env  env\n                       :attr attribute})))\n\n(defsc ToManyPicker [this {:keys [env attr]}]\n  {:componentDidMount (fn [this]\n                        (let [{:keys [env attr]} (comp/props this)\n                              form-instance (::form/form-instance env)\n                              props         (comp/props form-instance)\n                              form-class    (comp/react-type form-instance)]\n                          (picker-options/load-options! form-instance form-class props attr)))}\n  (let [{::form/keys [form-instance]} env\n        visible? (form/field-visible? form-instance attr)]\n    (when visible?\n      (let [{::form/keys [attributes field-options]} (comp/component-options form-instance)\n            {attr-field-options ::form/field-options\n             ::attr/keys        [qualified-key]} attr\n            field-options      (get field-options qualified-key)\n            target-id-key      (first (keep (fn [{k ::attr/qualified-key ::attr/keys [target]}]\n                                              (when (= k qualified-key) target)) attributes))\n            {:keys                 [style]\n             ::picker-options/keys [cache-key query-key]} (merge attr-field-options field-options)\n            cache-key          (or (?! cache-key (comp/react-type form-instance) (comp/props form-instance)) query-key)\n            cache-key          (or cache-key query-key (log/error \"Ref field MUST have either a ::picker-options/cache-key or ::picker-options/query-key in attribute \" qualified-key))\n            props              (comp/props form-instance)\n            options            (get-in props [::picker-options/options-cache cache-key :options])\n            current-selection  (into #{}\n                                 (keep (fn [entity]\n                                         (when-let [id (get entity target-id-key)]\n                                           [target-id-key id])))\n                                 (get props qualified-key))\n            field-label        (form/field-label env attr)\n            invalid?           (validation/invalid-attribute-value? env attr)\n            read-only?         (form/read-only? form-instance attr)\n            validation-message (when invalid? (validation/validation-error-message env attr))]\n        (div :.ui.field {:classes [(when invalid? \"error\")]}\n          (dom/label field-label \" \" (when invalid? validation-message))\n          (div :.ui.middle.aligned.celled.list.big\n            {:style {:marginTop \"0\"}}\n            (if (= style :dropdown)\n              (ui-wrapped-dropdown\n                {:value    current-selection\n                 :multiple true\n                 :disabled read-only?\n                 :options  options\n                 :onChange (fn [v] (form/input-changed! env qualified-key v))})\n              (map (fn [{:keys [text value]}]\n                     (let [checked? (contains? current-selection value)]\n                       (div :.item {:key value}\n                         (div :.content {}\n                           (div :.ui.toggle.checkbox {:style {:marginTop \"0\"}}\n                             (dom/input\n                               {:type     \"checkbox\"\n                                :checked  checked?\n                                :onChange #(if-not checked?\n                                             (form/input-changed! env qualified-key (vec (conj current-selection value)))\n                                             (form/input-changed! env qualified-key (vec (disj current-selection value))))})\n                             (dom/label text))))))\n                options))))))))\n\n(def ui-to-many-picker (comp/factory ToManyPicker {:keyfn :id}))\n(let [ui-to-many-picker (comp/factory ToManyPicker {:keyfn (fn [{:keys [attr]}] (::attr/qualified-key attr))})]\n  (defn to-many-picker [env attribute]\n    (ui-to-many-picker {:env  env\n                        :attr attribute})))\n"]}