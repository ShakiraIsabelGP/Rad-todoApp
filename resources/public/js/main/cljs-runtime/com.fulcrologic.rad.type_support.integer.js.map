{"version":3,"sources":["com/fulcrologic/rad/type_support/integer.cljc"],"mappings":";AAMA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIGe,AAAWC;;AAJd,AAAA;AAAA;;;;;AAAA,AAAOH,AAGJC;AAHH,AAAA,AAAAZ,AAAA,AAAAH,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIGe,AAAWC;AAJdd,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAI,AAAA,AAAAC,AAAAL,AAAA;AAAAM,AAAA,AAAAD,AAAAL,AAAA;AAAA,AAAA,AAAAI;AAAA,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAGGQ;;AAHH;;AAAA,AAAAJ,AAAA,AAGGI;AAHH,AAAA,AAAA,AAAA,AAMWG,AAAWH;AANtB,AAAAH,AAMyCO;AANzC,AAAA;;AAAAN,AAAA,AAAAF,AAGGI;AAHH,AAAA,AAAAN;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAAI;;AAAA;;AAAAA;;AAUA,AAAKO,AAAUN","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","map__69055","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","argspec69051","cljs.core.get","retspec69052","com.fulcrologic.guardrails.core/run-check","f69054","e69057","ret69053","com.fulcrologic.rad.type-support.integer/parse-long","v","cljs.core/string?","cljs.core/int?","cognitect.transit/integer","_","com.fulcrologic.rad.type-support.integer/parse-int"],"sourcesContent":["(ns com.fulcrologic.rad.type-support.integer\n  (:refer-clojure :exclude [parse-long])\n  (:require\n    [com.fulcrologic.guardrails.core :refer [>defn =>]]\n    [cognitect.transit :as ct]))\n\n(>defn parse-long\n  \"Parse a string into an integer value. In CLJS this can return a Number or a goog.math.Long\n   if it would overflow a js Number. Returns 0 if it cannot be parsed.\"\n  [v]\n  [string? => int?]\n  #?(:cljs\n     (try (ct/integer v) (catch :default _ 0))\n     :clj\n     (try (Long/parseLong v) (catch Exception _ 0))))\n\n(def parse-int parse-long)\n"]}