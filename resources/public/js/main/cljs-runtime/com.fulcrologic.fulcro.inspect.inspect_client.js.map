{"version":3,"sources":["com/fulcrologic/fulcro/inspect/inspect_client.cljc"],"mappings":"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","names":["js/goog.define","com.fulcrologic.fulcro.inspect.inspect-client/INSPECT","js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro","js/com.fulcrologic.fulcro.inspect","js/com.fulcrologic.fulcro.inspect.inspect-client","js/com.fulcrologic.fulcro.inspect.inspect-client.run-picker","com.fulcrologic.fulcro.inspect.inspect-client/run-picker","cljs.core.atom","js/com.fulcrologic.fulcro.inspect.inspect-client.started?*","com.fulcrologic.fulcro.inspect.inspect-client/started?*","js/com.fulcrologic.fulcro.inspect.inspect-client.tools-app*","com.fulcrologic.fulcro.inspect.inspect-client/tools-app*","js/com.fulcrologic.fulcro.inspect.inspect-client.apps*","com.fulcrologic.fulcro.inspect.inspect-client/apps*","com.fulcrologic.fulcro.inspect.inspect-client/app-uuid-key","js/com.fulcrologic.fulcro.inspect.inspect-client.send-ch","com.fulcrologic.fulcro.inspect.inspect-client/send-ch","cljs.core.async.chan","cljs.core.async/dropping-buffer","com.fulcrologic.fulcro.inspect.inspect-client/post-message","type","data","e52547","cljs.core.async.put_BANG_","e","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","com.fulcrologic.fulcro.inspect.inspect-client/cljs?","env","cljs.core/boolean","var_args","G__52549","com.fulcrologic.fulcro.inspect.inspect-client/isoget","js/Error","obj","k","com.fulcrologic.fulcro.inspect.inspect_client.isoget","default","or__4126__auto__","goog.object/get","G__52554","cljs.core/name","com.fulcrologic.fulcro.inspect.inspect-client/app-state","app","G__52558","cljs.core/deref","com.fulcrologic.fulcro.inspect.inspect-client/runtime-atom","G__52559","com.fulcrologic.fulcro.inspect.inspect-client/state-atom","G__52560","com.fulcrologic.fulcro.inspect.inspect-client/app-uuid","G__52562","cljs.core.get","com.fulcrologic.fulcro.inspect.inspect-client/remotes","G__52563","com.fulcrologic.fulcro.inspect.inspect-client/app-id","G__52567","com.fulcrologic.fulcro.inspect.inspect-client/fulcro-app-id","com.fulcrologic.fulcro.inspect.inspect-client/get-component-name","component","G__52568","com.fulcrologic.fulcro.inspect.inspect-client/comp-transact!","tx","options","tx!","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","com.fulcrologic.fulcro.inspect.inspect-client/MAX_HISTORY_SIZE","com.fulcrologic.fulcro.inspect.inspect-client/current-history-id","com.fulcrologic.fulcro.inspect.inspect-client/record-history-entry!","state","now","cljs.core.swap_BANG_","runtime","history","pruned-history","cljs.core/count","cljs.core.subvec","new-history","cljs.core.conj","cljs.core.assoc","com.fulcrologic.fulcro.inspect.inspect-client/get-history-entry","id","entry","cljs.core/first","cljs.core.filter","p__52571","map__52572","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","entry-id","cljs.core._EQ_","cljs.core/seq","com.fulcrologic.fulcro.inspect.inspect-client/db-changed!","old-state","new-state","app-uuid","state-id","com.fulcrologic.fulcro.inspect.inspect-client/event-data","event","G__52578","goog.object/getValueByKeys","com.fulcrologic.fulcro.inspect.transit/read","com.fulcrologic.fulcro.inspect.inspect-client/start-send-message-loop","c__50892__auto__","cljs.core.async.impl.dispatch/run","f__50893__auto__","switch__50856__auto__","state_52607","state_val_52608","statearr-52610","cljs.core.async.impl.ioc-helpers/take!","inst_52605","cljs.core.async.impl.ioc-helpers/return-chan","inst_52583","statearr-52611","statearr-52612","statearr-52613","inst_52588","cljs.core.nth","inst_52589","inst_52590","inst_52591","inst_52592","js/Date","inst_52593","inst_52594","cljs.core/PersistentHashMap","inst_52595","inst_52596","inst_52597","inst_52598","inst_52599","statearr-52614","statearr-52615","statearr-52616","inst_52603","statearr-52617","statearr-52618","state-machine__50857__auto__","ret-value__50858__auto__","result__50859__auto__","cljs.core/keyword-identical?","ex__50860__auto__","e52619","statearr-52620","statearr-52621","state__50894__auto__","statearr-52622","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","js/window","cljs.core/clj->js","com.fulcrologic.fulcro.inspect.transit/write","com.fulcrologic.fulcro.inspect.inspect-client/listen-local-messages","G__52623","com.fulcrologic.fulcro.inspect.inspect-client/handle-devtool-message","G__52627","com.fulcrologic.fulcro.inspect.inspect-client/transact-inspector!","ref","com.fulcrologic.fulcro.inspect.inspect-client/dispose-app","cljs.core/dissoc","com.fulcrologic.fulcro.inspect.inspect-client/set-active-app","com.fulcrologic.fulcro.inspect.inspect-client/send-started!","remote","tx-id","txn","start","cljs.core.sequence","cljs.core.concat","cljs.core/List","com.fulcrologic.fulcro.inspect.inspect_client.transact_inspector_BANG_","com.fulcrologic.fulcro.inspect.inspect-client/send-finished!","response","finished","com.fulcrologic.fulcro.inspect.inspect-client/send-failed!","error","p__52663","map__52664","message","G__52666","cljs.core/Keyword","seq__52667","chunk__52668","count__52669","i__52670","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/next","cljs.core/vals","remote-names","cljs.core.sort_by","p1__52661#","cljs.core.juxt","cljs.core.not_EQ_","cljs.core/str","cljs.core/keys","map__52676","target-state","temp__5733__auto__","render!","map__52690","b2__11668__auto__","map__52692","value","cljs.core/reset!","G__52694","G__52695","map__52696","based-on","map__52698","prior-state","diff","com.fulcrologic.fulcro.inspect.diff/diff","G__52700","cljs.core/not","map__52702","tx-ref","fexpr__52708","e52711","js/alert","_e","map__52713","query","mutation","remote-name","msg-id","transmit!","ast","edn-query-language.core/query->ast","cljs.core/random-uuid","G__52718","G__52719","cljs.core/identity","p__52720","map__52721","body","result","error?","map__52723","log","log-js","warn","js/console.log","js/console.warn","js/console.error","com.fulcrologic.fulcro.inspect.inspect-client/install","_","js/document.documentElement.setAttribute","com.fulcrologic.fulcro.inspect.inspect-client/app-started!","and__4115__auto__","js/goog.DEBUG","networking","state*","cljs.core/assoc","p1__52725#","p1__52728#","p2__52729#","p3__52726#","p4__52727#","cljs.core/add-watch","p__52734","p__52735","map__52736","map__52737","com.fulcrologic.fulcro.inspect.inspect-client/optimistic-action-finished!","state-id-before","db-before","db-after","component-name","current-id","G__52741"],"sourcesContent":["(ns ^:no-doc com.fulcrologic.fulcro.inspect.inspect-client\n  \"Functions used by Fulcro to talk to Fulcro Inspect.\"\n  #?(:cljs (:require-macros com.fulcrologic.fulcro.inspect.inspect-client))\n  (:require\n    [edn-query-language.core :as eql]\n    [com.fulcrologic.fulcro.algorithms.lookup :as ah]\n    #?@(:cljs [[goog.object :as gobj]\n               [com.fulcrologic.fulcro.inspect.diff :as diff]\n               [com.fulcrologic.fulcro.inspect.transit :as encode]\n               [cljs.core.async :as async]])\n    [taoensso.encore :as encore]\n    [taoensso.timbre :as log]\n    [taoensso.encore :as enc]))\n\n#?(:cljs (goog-define INSPECT false))\n\n;; This is here so that you can include the element picker without killing React Native\n(defonce run-picker (atom nil))\n\n(declare handle-devtool-message)\n(defonce started?* (atom false))\n(defonce tools-app* (atom nil))\n(defonce apps* (atom {}))\n(def app-uuid-key :fulcro.inspect.core/app-uuid)\n\n(defonce send-ch #?(:clj nil :cljs (async/chan (async/dropping-buffer 50000))))\n(defn post-message [type data]\n  #?(:cljs (try\n             (async/put! send-ch [type data])\n             (catch :default e\n               (log/error \"Cannot send to inspect. Channel closed. See https://book.fulcrologic.com/#err-inspect-ch-closed\")))))\n\n(defn cljs?\n  \"Returns true when env is a cljs macro &env\"\n  [env]\n  (boolean (:ns env)))\n\n(defn- isoget\n  \"Like get, but for js objects, and in CLJC. In clj, it is just `get`. In cljs it is\n  `gobj/get`.\"\n  ([obj k] (isoget obj k nil))\n  ([obj k default]\n   #?(:clj  (get obj k default)\n      :cljs (or (gobj/get obj (some-> k (name))) default))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Helpers so we don't have to include other nses\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn app-state [app] (some-> app :com.fulcrologic.fulcro.application/state-atom deref))\n(defn runtime-atom [app] (some-> app :com.fulcrologic.fulcro.application/runtime-atom))\n(defn state-atom [app] (some-> app :com.fulcrologic.fulcro.application/state-atom))\n(defn app-uuid [app] (some-> app :com.fulcrologic.fulcro.application/state-atom deref (get app-uuid-key)))\n(defn remotes [app] (some-> (runtime-atom app) deref :com.fulcrologic.fulcro.application/remotes))\n(defn app-id [app] (some-> (app-state app) :fulcro.inspect.core/app-id))\n(defn fulcro-app-id [app] (:com.fulcrologic.fulcro.application/id app))\n(defn get-component-name [component] (when component (some-> (isoget component :fulcro$options) :displayName)))\n(defn comp-transact! [app tx options]\n  (let [tx! (ah/app-algorithm app :tx!)]\n    (tx! app tx options)))\n\n(def MAX_HISTORY_SIZE 100)\n\n(defn current-history-id\n  \"Current time in the recorded history of states\"\n  [app]\n  (or (-> app (runtime-atom) deref ::time) 1))\n\n(defn record-history-entry!\n  \"Record a state change in this history. Returns the ID of the newly recorded entry.\"\n  [app state]\n  (let [now (current-history-id app)]\n    (swap! (runtime-atom app)\n      (fn [runtime]\n        (let [history        (::history runtime)\n              pruned-history (cond\n                               (nil? history) []\n                               (> (count history) MAX_HISTORY_SIZE) (subvec history 1)\n                               :else history)\n              new-history    (conj pruned-history {:id    now\n                                                   :value state})]\n          (assoc runtime\n            ::time (inc now)\n            ::history new-history))))\n    now))\n\n(defn get-history-entry [app id]\n  (let [history (-> app runtime-atom deref ::history)\n        entry   (first (filter\n                         (fn [{entry-id :id}] (= id entry-id))\n                         (seq history)))]\n    entry))\n\n\n(defn db-changed!\n  \"Notify Inspect that the database changed\"\n  [app old-state new-state]\n  #?(:cljs\n     (let [app-uuid (app-uuid app)\n           state-id (record-history-entry! app new-state)]\n       (post-message :fulcro.inspect.client/db-changed! {app-uuid-key                    app-uuid\n                                                         :fulcro.inspect.client/state-id state-id}))))\n\n(defn event-data [event]\n  #?(:cljs (some-> event (gobj/getValueByKeys \"data\" \"fulcro-inspect-devtool-message\") encode/read)))\n\n(defn start-send-message-loop []\n  #?(:cljs\n     (async/go-loop []\n       (when-let [[type data] (async/<! send-ch)]\n         (.postMessage js/window (clj->js {:fulcro-inspect-remote-message (encode/write {:type type :data data :timestamp (js/Date.)})}) \"*\")\n         (recur)))))\n\n(defn listen-local-messages []\n  #?(:cljs\n     (.addEventListener js/window \"message\"\n       (fn [^js event]\n         (cond\n           (and (identical? (.-source event) js/window)\n             (gobj/getValueByKeys event \"data\" \"fulcro-inspect-devtool-message\"))\n           (handle-devtool-message (event-data event))\n\n           (and (identical? (.-source event) js/window)\n             (gobj/getValueByKeys event \"data\" \"fulcro-inspect-start-consume\"))\n           (start-send-message-loop)))\n       false)))\n\n(defn transact-inspector!\n  ([tx]\n   (post-message :fulcro.inspect.client/transact-inspector {:fulcro.inspect.client/tx tx}))\n  ([ref tx]\n   (post-message :fulcro.inspect.client/transact-inspector {:fulcro.inspect.client/tx-ref ref :fulcro.inspect.client/tx tx})))\n\n(defn dispose-app [app-uuid]\n  (swap! apps* dissoc app-uuid)\n  (post-message :fulcro.inspect.client/dispose-app {app-uuid-key app-uuid}))\n\n(defn set-active-app [app-uuid]\n  (post-message :fulcro.inspect.client/set-active-app {app-uuid-key app-uuid}))\n\n#_(defn inspect-app [app]\n    #?(:cljs\n       (let [networking (remotes app)\n             state*     (state-atom app)\n             app-uuid   (random-uuid)]\n\n         (swap! apps* assoc app-uuid app)\n         #_(update-state-history app @state*)\n\n         (post-message :fulcro.inspect.client/init-app {app-uuid-key                         app-uuid\n                                                        :fulcro.inspect.core/app-id          (app-id app)\n                                                        :fulcro.inspect.client/remotes       (sort-by (juxt #(not= :remote %) str) (keys networking))\n                                                        :fulcro.inspect.client/initial-state @state*\n                                                        :fulcro.inspect.client/state-hash    (hash @state*)})\n\n         (add-watch state* app-uuid #(db-update app app-uuid %3 %4))\n\n         (swap! state* assoc app-uuid-key app-uuid)\n\n         app)))\n\n(defn send-started! [app remote tx-id txn]\n  #?(:cljs\n     (let [start    (js/Date.)\n           app-uuid (app-uuid app)]\n       (transact-inspector! [:fulcro.inspect.ui.network/history-id [app-uuid-key app-uuid]]\n         [`(fulcro.inspect.ui.network/request-start ~{:fulcro.inspect.ui.network/remote             remote\n                                                      :fulcro.inspect.ui.network/request-id         tx-id\n                                                      :fulcro.inspect.ui.network/request-started-at start\n                                                      :fulcro.inspect.ui.network/request-edn        txn})]))))\n\n(defn send-finished! [app remote tx-id response]\n  #?(:cljs\n     (let [finished (js/Date.)\n           app-uuid (app-uuid app)]\n       (transact-inspector! [:fulcro.inspect.ui.network/history-id [app-uuid-key app-uuid]]\n         [`(fulcro.inspect.ui.network/request-finish ~{:fulcro.inspect.ui.network/request-id          tx-id\n                                                       :fulcro.inspect.ui.network/request-finished-at finished\n                                                       :fulcro.inspect.ui.network/response-edn        response})]))))\n\n(defn send-failed! [app tx-id error]\n  #?(:cljs\n     (let [finished (js/Date.)\n           app-uuid (app-uuid app)]\n       (transact-inspector! [:fulcro.inspect.ui.network/history-id [app-uuid-key app-uuid]]\n         [`(fulcro.inspect.ui.network/request-finish ~{:fulcro.inspect.ui.network/request-id          tx-id\n                                                       :fulcro.inspect.ui.network/request-finished-at finished\n                                                       :fulcro.inspect.ui.network/error               error})]))))\n\n;; LANDMARK: Incoming message handler for Inspect\n(defn handle-devtool-message [{:keys [type data] :as message}]\n  (log/debug \"Devtools Message received\" message)\n  #?(:cljs\n     (case type\n       :fulcro.inspect.client/request-page-apps\n       (do\n         (doseq [app (vals @apps*)]\n           (let [state        (app-state app)\n                 state-id     (record-history-entry! app state)\n                 remote-names (remotes app)]\n             (post-message :fulcro.inspect.client/init-app\n               {app-uuid-key                                (app-uuid app)\n                :fulcro.inspect.core/app-id                 (app-id app)\n                :fulcro.inspect.client/remotes              (sort-by (juxt #(not= :remote %) str)\n                                                              (keys remote-names))\n                :fulcro.inspect.client/initial-history-step {:id    state-id\n                                                             :value state}}))))\n\n       :fulcro.inspect.client/reset-app-state\n       (let [{:keys                     [target-state]\n              :fulcro.inspect.core/keys [app-uuid]} data]\n         (if-let [app (get @apps* app-uuid)]\n           (let [render! (ah/app-algorithm app :schedule-render!)]\n             (when (:id target-state)\n               (let [{:keys [id]} target-state]\n                 (enc/when-let [app (get @apps* app-uuid)\n                                {:keys [value]} (get-history-entry app id)]\n                   (reset! (state-atom app) value))))\n             (render! app {:force-root? true}))\n           (log/info \"Reset app on invalid uuid\" app-uuid)))\n\n       ;; Remote tool has asked for the history step at id, and can accept a diff from the given closest entry\n       :fulcro.inspect.client/fetch-history-step\n       (let [{:keys                     [id based-on]\n              :fulcro.inspect.core/keys [app-uuid]} data]\n         (enc/when-let [app (get @apps* app-uuid)\n                        {:keys [value]} (get-history-entry app id)]\n           (let [prior-state (get-history-entry app based-on)\n                 diff        (when prior-state (diff/diff prior-state value))]\n             (post-message :fulcro.inspect.client/history-entry\n               (cond-> {app-uuid-key                  app-uuid\n                        :fulcro.inspect.core/state-id id}\n                 diff (assoc :fulcro.inspect.client/diff diff\n                             :based-on based-on)\n                 (not diff) (assoc :fulcro.inspect.client/state value))))))\n\n\n       :fulcro.inspect.client/transact\n       (let [{:keys                     [tx tx-ref]\n              :fulcro.inspect.core/keys [app-uuid]} data]\n         (if-let [app (get @apps* app-uuid)]\n           (if tx-ref\n             (comp-transact! app tx {:ref tx-ref})\n             (comp-transact! app tx {}))\n           (log/error \"Transact on invalid uuid\" app-uuid \"See https://book.fulcrologic.com/#err-inspect-invalid-app-uuid\")))\n\n       :fulcro.inspect.client/pick-element\n       (if @run-picker\n         (@run-picker data)\n         (try\n           (js/alert \"Element picker not installed. Add it to your preload.\")\n           (catch :default _e\n             (log/error \"Element picker not installed in app. You must add it to you preloads. See https://book.fulcrologic.com/#err-inspect-elm-picker-missing\"))))\n\n       ;; These couple us to react, and side-effect are often tied to React lifecycle, so they are not worth the glamor\n       #_#_:fulcro.inspect.client/show-dom-preview\n           (encore/if-let [{:fulcro.inspect.core/keys [app-uuid]} data\n                           app (some-> @apps* (get app-uuid))\n                           {:keys [value]} (get-history-entry app (:fulcro.inspect.client/state-id data))]\n             (if (map? value)\n               (binding [fdn/*denormalize-time* 900000000   ; force our props to seem like the most recent\n                         comp/*app*             app\n                         rc/*shared*            {}          ;; TODO: don't have historical shared props...\n                         comp/*depth*           0]\n                 (render-state! app value))\n           (log/error \"Unable to find app/state for preview. See https://book.fulcrologic.com/#err-inspect-cant-find-app\")))\n\n       #_#_:fulcro.inspect.client/hide-dom-preview\n           (encore/when-let [{:fulcro.inspect.core/keys [app-uuid]} data\n                             app     (some-> @apps* (get app-uuid))\n                             render! (ah/app-algorithm app :render!)]\n             (render! app {:force-root? true}))\n\n       :fulcro.inspect.client/network-request\n       (let [{:keys                          [query mutation]\n              remote-name                    :fulcro.inspect.client/remote\n              :fulcro.inspect.ui-parser/keys [msg-id]\n              :fulcro.inspect.core/keys      [app-uuid]} data]\n         (encore/when-let [app       (get @apps* app-uuid)\n                           remote    (get (remotes app) remote-name)\n                           transmit! (-> remote :transmit!)\n                           ast       (eql/query->ast (or query mutation))\n                           tx-id     (random-uuid)]\n           (send-started! app remote-name tx-id (or query mutation))\n           (transmit! remote {:com.fulcrologic.fulcro.algorithms.tx-processing/id             tx-id\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/ast            ast\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/idx            0\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/options        {}\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/update-handler identity\n                              :com.fulcrologic.fulcro.algorithms.tx-processing/result-handler (fn [{:keys [body] :as result}]\n                                                                                                (let [error? (ah/app-algorithm app :remote-error?)]\n                                                                                                  (if (error? result)\n                                                                                                    (send-failed! app tx-id result)\n                                                                                                    (send-finished! app remote-name tx-id body)))\n                                                                                                (post-message :fulcro.inspect.client/message-response\n                                                                                                  {:fulcro.inspect.ui-parser/msg-id       msg-id\n                                                                                                   :fulcro.inspect.ui-parser/msg-response body}))})))\n\n       :fulcro.inspect.client/console-log\n       (let [{:keys [log log-js warn error]} data]\n         (cond\n           log\n           (js/console.log log)\n\n           log-js\n           (js/console.log (clj->js log-js))\n\n           warn\n           (js/console.warn warn)\n\n           error\n           (js/console.error error)))\n\n       :fulcro.inspect.client/check-client-version\n       (post-message :fulcro.inspect.client/client-version {:version \"3.0.0\"})\n\n       (log/debug \"Unknown message\" type))))\n\n\n(defn install [_]\n  #?(:cljs\n     (do\n       (js/document.documentElement.setAttribute \"__fulcro-inspect-remote-installed__\" true)\n\n       (when-not @started?*\n         (log/info \"Installing Fulcro 3.x Inspect\" {})\n\n         (reset! started?* true)\n\n         (listen-local-messages)))))\n\n(defn app-started!\n  \"Register the application with Inspect, if it is available.\"\n  [app]\n  #?(:cljs\n     (when (and (or goog.DEBUG INSPECT) (not= \"disabled\" INSPECT))\n       (let [networking (remotes app)\n             state*     (state-atom app)\n             app-uuid   (fulcro-app-id app)]\n         (swap! apps* assoc app-uuid app)\n         (record-history-entry! app @state*)\n         (swap! state* assoc app-uuid-key app-uuid)\n         (post-message :fulcro.inspect.client/init-app {app-uuid-key                         app-uuid\n                                                        :fulcro.inspect.core/app-id          (app-id app)\n                                                        :fulcro.inspect.client/remotes       (sort-by (juxt #(not= :remote %) str) (keys networking))\n                                                        :fulcro.inspect.client/initial-state @state*})\n         (add-watch state* app-uuid #(db-changed! app %3 %4))))))\n\n(defn optimistic-action-finished!\n  \"Notify inspect that a transaction finished.\n\n   app - The app\n   env - The mutation env that completed.\"\n  [app\n   {:keys [component ref state com.fulcrologic.fulcro.algorithms.tx-processing/options]}\n   {:keys [tx-id tx state-id-before db-before db-after]}]\n  #?(:cljs\n     (let [component-name (get-component-name component)\n           current-id     (current-history-id app)\n           tx             (cond-> {:fulcro.inspect.ui.transactions/tx-id                    tx-id\n                                   :fulcro.history/client-time                              (js/Date.)\n                                   :fulcro.history/tx                                       tx\n                                   :fulcro.history/db-before-id                             state-id-before\n                                   :fulcro.history/db-after-id                              current-id\n                                   :fulcro.history/network-sends                            []\n                                   :com.fulcrologic.fulcro.algorithms.tx-processing/options options}\n                            component-name (assoc :component component-name)\n                            ref (assoc :ident-ref ref))\n           app-uuid       (app-uuid app)]\n       (post-message :fulcro.inspect.client/new-client-transaction {app-uuid-key              app-uuid\n                                                                    :fulcro.inspect.client/tx tx}))))\n\n(defmacro ido\n  \"Wrap a block of code that will only run if Inspect is enabled.  Code in these blocks will also be removed via\n  DCE in Closure.\n\n  This macro emits nothing when run in clj, and will output code that\n  should be completely removed by the Closure compiler if both\n  goog.DEBUG and com.fulcrologic.fulcro.inspect.inspect-client/INSPECT are false.\n\n  This allows you to enable inspect messages in production by adding the following to\n  your compiler config:\n\n  :closure-defines {\\\"com.fulcrologic.fulcro.inspect.inspect_client.INSPECT\\\" true}\n  \"\n  [& body]\n  (when (cljs? &env)\n    `(when (and (or ~'goog.DEBUG INSPECT) (not= \"disabled\" INSPECT))\n       (try\n         ~@body\n         (catch :default ~'e)))))\n\n(defmacro ilet\n  \"Like `clojure.core/let`, but elides the block if Inspect isn't enabled.\n\n  This macro emits nothing when run in clj, and will output code that\n  should be completely removed by the Closure compiler if both\n  goog.DEBUG and com.fulcrologic.fulcro.inspect.inspect-client/INSPECT are false.\n\n  This allows you to enable inspect messages in production by adding the following to\n  your compiler config:\n\n  :closure-defines {\\\"com.fulcrologic.fulcro.inspect.inspect_client.INSPECT\\\" true}\n  \"\n  [bindings & body]\n  (when (cljs? &env)\n    `(ido\n       (let ~bindings\n         ~@body))))\n"]}