{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/controls/boolean_control.cljc"],"mappings":";AAWA,AAAA,AAAA;AAAA,AAAAA,AAAA,AAAA,AAC0B,AAAKmB,AAAEA,AAAEA;AAAT,AAAA;AAD1B,AAAA,AAAuBA;AAAvB,AAAA,AAAAlB,AAAA,AAAuBkB;AAAvB,AAAA,AAAAjB,AAAA,AAAAC,AAAAA,AAAAA,AAAuBgB,AAAAA;AAAvBjB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAE,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAAJ,AAAAA;AAAA,AAAAK,AAAAL,AAAA,AAAiCkB;AAAjC,AAAAb,AAAAL,AAAA,AAA0CmB;AAA1C,AAEE,AAAME,AAAS,AAACC,AAA2BJ;AAA3CE,AAC8D,AAACf,AAAIgB,AAASF;AAD5EC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlB,AAAA,AAAAkB,AAAA,AAAA,AAAA,AAAA,AAAAjB,AAAAC,AAAAgB,AAAAA;AAAAA,AACqDO;AADrD,AAAAtB,AAAAe,AAAA,AACcG;AADd,AAAAlB,AAAAe,AAAA,AACoBI;AADpB,AAAAnB,AAAAe,AAAA,AAC6BK;AAD7B,AAAApB,AAAAe,AAAA,AACuCM;AADvC,AAEE,AAAIC;AACF,AAAMJ,AAAc,AAACK,AAAGL,AAAML;AACxBO,AAAU,AAACG,AAAGH,AAAUP;AACxBQ,AAAU,AAAAG,AAAI,AAAA,AAAMH;AAAV,AAAA,AAAAG;AAAAA;;AAAoB,AAACD,AAAGF,AAASR;;;AAC3CY,AAAU,AAACC,AAAsBb,AAASC;AAHhD,AAIE,AAAMO;AAAN,AACE,AAAAM,AAAA,AAAA,AACE,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAoC,AAAKb,AACvC,AAAAa,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACsB,AAACC,AAAQR,AACT,AAAKR;AAAL,AACE,AAACiB,AAAuBhB,AAASC,AAAY,AAACgB,AAAIL;;AAClD,AAAMN;AAAN,AACE,AAAAY,AAAUlB;AAAVmB,AAAmB,AAACF,AAAIL;AAAxB,AAAA,AAAAM,AAAAC,AAAAD,AAAAC,AAACb,AAAAA,AAAAA;;AADH;;AAN5B,AACE,AACE,AAAA,AAMsB,AAACS,AAAQH,AAC/B,AAAAE,AAAA,AAAA,AAAA,AAAWT;;AAVjB;;;AAWF,AAAAe,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAoDrB;AAApD,AAAA,AAAA,AAAA;;;;AApBN,AAAA,AAAA,AAAAb,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA;;;AAAA,AAAAC,AAAA,AAAAT,AAAAP,AAAA,AAAOkB;;;AAAP,AAAAD,AAAA,AAAAjB,AAAOkB;AAsBP,AAAKyB,AAAe,AAAA,AAAA,AAAA,AAACC,AAAa1B","names":["options__56259__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__89164","com.fulcrologic.fulcro.components/props","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.controls","js/com.fulcrologic.rad.rendering.semantic-ui.controls.boolean-control","js/com.fulcrologic.rad.rendering.semantic-ui.controls.boolean-control.BooleanControl","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.controls.boolean-control/BooleanControl","_","instance","control-key","map__89166","controls","com.fulcrologic.rad.control.component_controls","label","onChange","disabled?","visible?","control","com.fulcrologic.rad.options_util._QMARK__BANG_","or__4126__auto__","value","com.fulcrologic.rad.control/current-value","com.fulcrologic.fulcro.dom.macro_create_element","cljs.core/boolean","com.fulcrologic.rad.control/set-parameter!","cljs.core/not","G__89168","G__89169","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","com.fulcrologic.rad.rendering.semantic-ui.controls.boolean-control/render-control","com.fulcrologic.fulcro.components.factory"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.controls.boolean-control\n  (:require\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.ui-state-machines :as uism]\n    [com.fulcrologic.rad.options-util :refer [?!]]\n    [com.fulcrologic.rad.report :as report]\n    [taoensso.timbre :as log]\n    #?(:cljs [com.fulcrologic.fulcro.dom :as dom]\n       :clj  [com.fulcrologic.fulcro.dom-server :as dom])\n    [com.fulcrologic.rad.control :as control]))\n\n(defsc BooleanControl [_ {:keys [instance control-key]}]\n  {:shouldComponentUpdate (fn [_ _ _] true)}\n  (let [controls (control/component-controls instance)\n        {:keys [label onChange disabled? visible?] :as control} (get controls control-key)]\n    (if control\n      (let [label     (or (?! label instance))\n            disabled? (?! disabled? instance)\n            visible?  (or (nil? visible?) (?! visible? instance))\n            value     (control/current-value instance control-key)]\n        (when visible?\n          (dom/div :.field\n            (dom/div :.ui.toggle.checkbox {:key (str control-key)}\n              (dom/input {:type     \"checkbox\"\n                          :readOnly (boolean disabled?)\n                          :onChange (fn [_]\n                                      (control/set-parameter! instance control-key (not value))\n                                      (when onChange\n                                        (onChange instance (not value))))\n                          :checked  (boolean value)})\n              (dom/label label)))))\n      (log/error \"Could not find control definition for \" control-key))))\n\n(def render-control (comp/factory BooleanControl {:keyfn :control-key}))\n"]}