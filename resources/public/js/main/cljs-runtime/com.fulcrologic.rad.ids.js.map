{"version":3,"sources":["com/fulcrologic/rad/ids.cljc"],"mappings":"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","names":["com.fulcrologic.rad.ids/valid-uuid-string?","s","cljs.core/boolean","cljs.core/re-matches","var_args","G__69059","com.fulcrologic.rad.ids/new-uuid","js/Error","com.yetanalytics.squuid/generate-squuid","v","cljs.core/uuid?","cljs.core/int?","sv","l","padding","clojure.string.join","cljs.core.repeat","cljs.core/uuid","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl","cljs.spec.alpha/cat-impl","map__69064","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","retspec69061","cljs.core.get","argspec69060","com.fulcrologic.guardrails.core/run-check","f69063","cljs.core/Keyword","ret69062","com.fulcrologic.rad.ids/select-keys-in-ns","m","nspc","cljs.core/map?","cljs.core/string?","cljs.core/reduce-kv","new-map","k","cljs.core._EQ_","cljs.core/namespace","cljs.core.assoc","com.fulcrologic.rad.ids/id-string->id","type","id","G__69066","com.fulcrologic.rad.ids.new_uuid","com.fulcrologic.rad.type-support.integer/parse-int","com.fulcrologic.rad.type-support.integer/parse-long","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay"],"sourcesContent":["(ns com.fulcrologic.rad.ids\n  \"Functions supporting various ID concerns.\"\n  (:require\n    [com.yetanalytics.squuid :refer [generate-squuid]]\n    [clojure.string :as str]\n    [com.fulcrologic.guardrails.core :refer [>defn =>]]\n    [com.fulcrologic.rad.type-support.integer :as int]\n    [taoensso.timbre :as log])\n  #?(:clj\n     (:import (java.util UUID))))\n\n(defn valid-uuid-string?\n  \"Returns true if the given string appears to be a valid UUID string.\"\n  [s]\n  (boolean\n    (and\n      (string? s)\n      (re-matches #\"^........-....-....-....-............$\" s))))\n\n(defn new-uuid\n  \"Without args gives a semi-random SQUUID. With args, builds UUID based on input.\n\n  - If v is an int (in CLJC), it will generate a fixed UUID starting with FFF...and ending\n    in that number.\n  - If v is a uuid, it is just returned.\n  - If v is non-nil it will be used as a string to generate a UUID (can fail).\n  - If v is missing, you will get a random uuid.\"\n  ([] (generate-squuid))\n  #?(:clj ([v]\n           (cond\n             (uuid? v) v\n             (int? v)\n             (UUID/fromString\n               (format \"ffffffff-ffff-ffff-ffff-%012d\" v))\n             :else (UUID/fromString (str v)))))\n  #?(:cljs ([v]\n            (cond\n              (uuid? v) v\n              (int? v) (let [sv      (str v)\n                             l       (.-length sv)\n                             padding (str/join (repeat (- 12 l) \"0\"))]\n                         (uuid (str \"ffffffff-ffff-ffff-ffff-\" padding sv)))\n              :else (uuid (str v))))))\n\n(>defn select-keys-in-ns\n  \"Returns a version of `m` where only those keys with namespace `nspc` are kept.\"\n  [m nspc]\n  [map? string? => map?]\n  (reduce-kv\n    (fn [new-map k v]\n      (if (and (keyword? k) (= nspc (namespace k)))\n        (assoc new-map k v)\n        new-map))\n    {} m))\n\n(defn id-string->id\n  \"When forms are routed to their ID is in the URL as a string. This converts IDs in such a string format to the\n   given type (which must be a RAD type name that supports IDs like :uuid, :int, :long or :string).\"\n  [type id]\n  (case type\n    :uuid (new-uuid id)\n    :int (int/parse-int id)\n    :long (int/parse-long id)\n    :string id\n    (do\n      (log/error \"Unsupported ID type\" type)\n      id)))\n\n"]}