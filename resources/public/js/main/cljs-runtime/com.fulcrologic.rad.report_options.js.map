{"version":3,"sources":["com/fulcrologic/rad/report_options.cljc"],"mappings":";AAeA;;;;;AAAA,AAAKA;AAML;;;;;;;AAAA,AAAKC;AAQL;;;;;;;;;;;;;AAAA,AAAKC;AAcL;;;;;;;;;;;;AAAA,AAAKC;AAaL;;;;;;;;;;;;AAAA,AAAKC;AAaL;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAKC;AAwBL;;;;AAAA,AAAKC;AAKL;;;;AAAA,AAAKC;AAKL;;;;;;;;;;;;;;;AAAA,AAAKC;AAgBL;;;;;;;;;;;;;;;;;;;AAAA,AAAKC;AAoBL;;;AAAKC,AAAqDD;AAE1D;;;AAAA,AAAKE;AAIL;;;AAAKC,AAAoDD;AAEzD;;;;;AAAA,AAAKE;AAML;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAKC;AAgDL;;;;;;;;;;;;;;;;;;AAAA,AAAKC;AAmBL;;;AAAA,AAAKC;AAIL;;;AAAA,AAAKC;AAIL;;;;;;;;;;;;AAAA,AAAKC;AAaL;;;;;;;;;AAAA,AAAKC;AAUL;;;;;;;;;;;;;;;AAAA,AAAKC;AAgBL;;;AAAA,AAAkBC;AAIlB;;;;;;AAAA,AAAKC;AAOL;;;;;;;;;;;AAAA,AAAKC;AAYL;;;;;;;;AAAA,AAAKC;AASL;;;;;;;;;;;;;;;;;;;AAAA,AAAKC;AAoBL;;;;;;;;;;;;;;;;;AAAA,AAAKC;AAkBL;;;AAAA,AAAKC;AAIL;;;;AAAA,AAAKC;AAKL;;;;;;;AAAA,AAAKC;AAQL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAKC;AAwCL;;;;;;;;;;;AAAA,AAAKC;AAYL;;;;AAAA,AAAKC;AAKL;;;;;AAAA,AAAKC;AAML;;;;;;;;AAAA,AAAKC;AASL;;;;;;;;;;;;;;;;;;;;AAAA,AAAKC;AAqBL;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAKC;AA6BL;;;;;;;;;;AAAA,AAAKC;AAWL;;;;;AAAA,AAAKC;AAML;;;;;AAAA,AAAKC;AAML;;;;;;;AAAA,AAAKC;AAQL;;;;;;;;;;;;;;;AAAA,AAAKC;AAgBL;;;;;;AAAA,AAAKC;AAOL;;;;;;;;AAAA,AAAKC;AASL;;;;;;;;;;;;;AAAA,AAAKC;AAcL;;;;;AAAA,AAAKC;AAML;;;AAAA,AAAKC;AAIL;;;AAAA,AAAKC;AAIL;;;;AAAA,AAAKC","names":["com.fulcrologic.rad.report-options/row-pk","com.fulcrologic.rad.report-options/columns","com.fulcrologic.rad.report-options/column-alignment","com.fulcrologic.rad.report-options/column-class","com.fulcrologic.rad.report-options/column-classes","com.fulcrologic.rad.report-options/column-styles","com.fulcrologic.rad.report-options/source-attribute","com.fulcrologic.rad.report-options/title","com.fulcrologic.rad.report-options/form-links","com.fulcrologic.rad.report-options/column-formatters","com.fulcrologic.rad.report-options/field-formatters","com.fulcrologic.rad.report-options/column-formatter","com.fulcrologic.rad.report-options/field-formatter","com.fulcrologic.rad.report-options/run-on-mount?","com.fulcrologic.rad.report-options/controls","com.fulcrologic.rad.report-options/control-layout","com.fulcrologic.rad.report-options/route","com.fulcrologic.rad.report-options/column-headings","com.fulcrologic.rad.report-options/row-query-inclusion","com.fulcrologic.rad.report-options/row-heading","com.fulcrologic.rad.report-options/row-actions","com.fulcrologic.rad.report-options/link","com.fulcrologic.rad.report-options/links","com.fulcrologic.rad.report-options/denormalize?","com.fulcrologic.rad.report-options/row-visible?","com.fulcrologic.rad.report-options/compare-rows","com.fulcrologic.rad.report-options/initial-sort-params","com.fulcrologic.rad.report-options/paginate?","com.fulcrologic.rad.report-options/page-size","com.fulcrologic.rad.report-options/column-heading","com.fulcrologic.rad.report-options/raw-result-xform","com.fulcrologic.rad.report-options/rotate?","com.fulcrologic.rad.report-options/machine","com.fulcrologic.rad.report-options/post-process","com.fulcrologic.rad.report-options/BodyItem","com.fulcrologic.rad.report-options/query-inclusions","com.fulcrologic.rad.report-options/column-EQL","com.fulcrologic.rad.report-options/layout-style","com.fulcrologic.rad.report-options/row-style","com.fulcrologic.rad.report-options/load-cache-seconds","com.fulcrologic.rad.report-options/report-loaded","com.fulcrologic.rad.report-options/load-cache-expired?","com.fulcrologic.rad.report-options/on-select-row","com.fulcrologic.rad.report-options/skip-filtering?","com.fulcrologic.rad.report-options/load-options","com.fulcrologic.rad.report-options/column-info","com.fulcrologic.rad.report-options/column-infos","com.fulcrologic.rad.report-options/before-load","com.fulcrologic.rad.report-options/track-in-url?"],"sourcesContent":["(ns com.fulcrologic.rad.report-options\n  \"Documented definitions of the standard report options. These provide easy access to documentation for the options,\n  along with preventing spelling errors when using the keys in definitions. Plugin authors are encouraged to\n  write their own options files to get the same benefits.\n\n  Reports currently require a minimum of two options:\n\n  * `row-pk`\n  * `columns`\n  * `source-attribute`\n\n  NOTE to maintainers and Plugin authors: These files must be CLJC to make sure the symbols are resolvable\n  at *compile* time. No dynamic tricks please. The form and report macros must be able to resolve the option\n  symbols during evaluation.\")\n\n(def row-pk\n  \"An *attribute* that will serve as each row's primary key. May be a virtual attribute that is not actually stored\n   in the database, but the attribute must have a resolver that will return a stable value. Reports that generate\n   aggregated rows, for example, might use a combination of things to generate this value server-side.\"\n  :com.fulcrologic.rad.report/row-pk)\n\n(def columns\n  \"A vector of *attributes* that describe the columns of the report (when tabular). In non-tabular reports this\n  is still needed, but the renderer can choose to use the per-row data however it wants (points on a graph, etc).\n\n  The columns are treated as the authoritative definition of the attributes, meaning that you can assoc things like\n  `ao/style` on a column to override something like style.\"\n  :com.fulcrologic.rad.report/columns)\n\n(def column-alignment\n  \"ATTRIBUTE OPTION: A keyword or `(fn [report col-attr] )`.\n\n  Indicates the preferred alignment for the content of the attribute\n   when shown in a data column. This is a HINT to the renderer.\n\n   Typical supported values are: `:right`, `:left`, and `:center`.\n\n   See also `column-class` for an option that more directly targets general HTML layout.\n\n   WARNING: Using this and `column-class` at the same time may cause conflicts in an HTML renderer.\n   \"\n  :com.fulcrologic.rad.report/column-alignment)\n\n(def column-class\n  \"ATTRIBUTE OPTION. The name of a CSS class (a string) to add to the `classes` of\n  the HTML element that represents a column (f.ex. a `<td>` when rendering the report as a table).\n\n  This option is a HINT to the rendering plugin and will be ignored if it doesn't support it.\n\n   Example:\n\n   ```\n   ro/column-class \\\"my-respect-newlines\\\"\n   ```\"\n  :com.fulcrologic.rad.report/column-class)\n\n(def column-classes\n  \"A map from column (qualified keyword) to a the name of a CSS class (a string) to add to the `classes` of\n  the HTML element that represents a column (f.ex. a `<td>` when rendering the report as a table).\n\n  This option is a HINT to the rendering plugin and will be ignored if it doesn't support it.\n\n   Example:\n\n   ```\n   ro/column-classes {:movie/description \\\"my-respect-newlines\\\"}\n   ```\"\n  :com.fulcrologic.rad.report/column-classes)\n\n(def column-styles\n  \"A map from column (qualified keyword) to a formatter style, which is either a keyword or a\n   `(fn [report-instance] keyword)`. Chooses an alternate rendering style for the column (if supported by\n   installed formatters).\n\n   Columns are formatted by `column-formatters`. You can manually set a field formatter using\n   `ro/column-formatter` or `ro/column-formatters`. If you do *not* set the formatter, then a formatter\n   will be selected from an installed set of predefined formatters, which are organized by\n   data type and style.\n\n   This option allows you to pick among the pre-installed (via `report/install-formatter!`)\n   formatters without having to define your own. The style of control selected will\n   depend on:\n\n   * This option.\n   * The `ao/style` set on the attribute of the column.\n   * A default value of `:default`.\n\n   WARNING: This option is ignored if the column has an explicit `column-formatter`.\n\n   See `report/install-formatter!`.\n   See also `column-formatter` and `column-formatters`.\"\n  :com.fulcrologic.rad.report/column-styles)\n\n(def source-attribute\n  \"A *qualified keyword* that will be used as the entry-point key for the query. The data source server must\n   have a resolver that can start queries at that keyword (global resolver).\"\n  :com.fulcrologic.rad.report/source-attribute)\n\n(def title\n  \"A string or `(fn [report-instance] string-or-element?)` that generates the title for this report. Can return a string\n   and many rendering plugins also allow a UI element.\"\n  :com.fulcrologic.rad.report/title)\n\n(def form-links\n  \"A shorthand for turning column values into links to their respective form for editing.  You can get similar\n   (but possibly more advanced) results using `column-formatters`, but this is a lot less code.\n\n   This option is a map from *qualified key* to a RAD Form.  The qualified key *must* be something that is persisted\n   (not a generated column) and co-exist at the top level of the form given (e.g. you cannot use a nested form key to access a\n   top-level form).\n\n   ```\n   ro/form-links {:account/name AccountForm}\n   ```\n\n   See also `column-formatters`.\n   \"\n  :com.fulcrologic.rad.report/form-links)\n\n(def column-formatters\n  \"A map from *qualified key* to a `(fn [report-instance value-to-format row-props attribute] string-or-element?)`. The function will\n   receive the raw value of the column and should return a string or a UI element *that is acceptable to the current render\n   plugin*.\n\n   ```\n   ro/column-formatters {:account/name\n                         (fn [this v]\n                           (dom/a {:onClick #(form/edit! this AccountForm (-> this comp/props :account/id)} (str v)))}\n   ```\n\n   Returning an element is particularly useful when the formatting needs something special, like bold, SVG, or some other\n   complex format.\n\n   A global default can be specified with `::report/column-formatter` on the attribute, which is just a `fn` (not a map).\n\n   See also `column-styles`, `attr/style`, `link`, `form-links`, `row-query-inclusion`, and `column-formatter`.\n   \"\n  :com.fulcrologic.rad.report/column-formatters)\n\n(def field-formatters \"DEPRECATED. Use column-formatters\" column-formatters)\n\n(def column-formatter\n  \"ATTRIBUTE OPTION. A `(fn [report-instance value row-props attribute])` which can be used on an attribute. See `column-formatters`.\"\n  :com.fulcrologic.rad.report/column-formatter)\n\n(def field-formatter \"DEPRECATED. Use column-formatter.\" column-formatter)\n\n(def run-on-mount?\n  \"Boolean. Should this report run when it is first mounted, or wait for the user to explicitly take an action. See\n   `controls`. If you set this to false you should make sure the user has some kind of control that allows them to\n   run the report.\"\n  :com.fulcrologic.rad.report/run-on-mount?)\n\n(def controls\n  \"ALIAS to ::control/controls. A map of control definitions, which can be action buttons or inputs.\n\n   Input control values are stored in the report's parameters, and can be used in the filtering/sorting of the\n   rows.\n\n   Each control is given a unique key, and a map that describes the control. A typical value of this option will look like:\n\n   ```\n   :com.fulcrologic.rad.control/controls {::new-invoice {:label  \\\"New Invoice\\\"\n                                                         :type   :button\n                                                         :action (fn [this] (form/create! this InvoiceForm))}\n                                          :show-inactive? {:type          :boolean\n                                                           :style         :toggle\n                                                           :default-value false\n                                                           :onChange      (fn [this _] (report/reload! this))\n                                                           :label         \\\"Show Inactive Accounts?\\\"}}\n                                          ::new-account {:label  \\\"New Account\\\"\n                                                         :type   :button\n                                                         :action (fn [this] (form/create! this AccountForm))}}\n   ```\n\n   The types of controls supported depend on your UI plugin.\n\n   A control is a map with keys:\n\n   * `:type`: OPTIONAL. Defaults to :button. Rendering plugins define what types are supported.\n   * `:style`: OPTIONAL. Defaults to :default. Rendering plugins define what styles are supported.\n   * `:action`: OPTIONAL. A side-effecting `(fn [report-instance])`.\n   * `:label` : REQUIRED. A string or `(fn [report-instance] string-or-element?)`. If it is an element then nothing\n                but the element is rendered, i.e. it needs to hand user interaction itself.\n                (For more customization, check whether your rendering plugin supports extra options, e.g. a report-row-button-renderer)\n   * `:visible?` : OPTIONAL. Defaults to true. A boolean or `(fn [report-class-or-instance] boolean?)`.\n      Indicates that the control should not be displayed (likely because it is an input you only intend to\n      set via routing params). You must also omit it from `control-layout`.\n   * `:local?` : OPTIONAL. Defaults to false. Indicates that you want the control's value to be private/local to the report\n   * `:retain?` : OPTIONAL. Defaults to true. Indicate that you want the in-state value to be retained in cases where the\n   report re-appears (is routed to) without an explicit value for this parameter. This means that if neither the URL or routing event\n   has a value for the control, then any in-state value for it will be preferred over the default value; otherwise,\n   the default-value (or nil) will be used.\n\n\n   Rendering plugins can expand this list of options as desired.\n\n   See also `control-layout`, `row-visible?`, `initial-sort-params`, and `compare-rows`.\n   \"\n  :com.fulcrologic.rad.control/controls)\n\n(def control-layout\n  \"Alias to `::control/control-layout`. Reports can have actions and input controls. These are normally laid out by simply throwing all of the buttons\n   in a sequence, and throwing all of the non-buttons in a form. No layout in particular is guaranteed by RAD\n   (though you rendering plugin may provide one).\n\n   This option is a HINT to the rendering plugin as to how you'd *like* the controls to be placed on the screen. The\n   content of this option is a map should generally look like:\n\n   ```\n   {:action-buttons [::a ::b ::c]\n    :inputs [[::d]\n             [::e ::f]]\n   ```\n\n   Where the keywords are the control keys that you wish to place in those respective positions in the UI. See\n   `controls`.\n   \"\n  :com.fulcrologic.rad.control/control-layout)\n\n(def route\n  \"A string that will be used as this reports path element in the routing tree. Must be unique among siblings.\"\n  :com.fulcrologic.rad.report/route)\n\n(def column-headings\n  \"A map from *qualified keyword* to a column heading, which can be a simple string or a `(fn [report-instance] string?)`\"\n  :com.fulcrologic.rad.report/column-headings)\n\n(def row-query-inclusion\n  \"An EQL query (vector) that will be added to the query of the rows IF you have the report system generate the row\n   component.\n\n   Note that reports will always include the `row-pk` in the query, and if a mix of columns are included they\n   will also include the PK (if possible) of the source of the columns in question.  You can use `row-query-inclusion`\n   and custom server-side resolvers to make any imaginable data available on a row, which can be useful in things\n   like `column-formatters` and `row-actions`.\n\n   BEWARE: If you provide your own `ro/BodyItem` then this is ignored. Modify the body item's query instead.\n   \"\n  :com.fulcrologic.rad.report/row-query-inclusion)\n\n(def row-heading\n  \"An optional function that can calculate a header that should be added to a row (in HTML this would typically be\n   a leftmost `th` on the row).\n\n   The function should be a `(fn [report-instance row-data] string-or-element)`.\n\n   TODO: Should the `row-data` include information about its relative position in the table?\n   \"\n  :com.fulcrologic.rad.report/row-heading)\n\n(def row-actions\n  \"A vector of actions that will appear on each row of the report (if supported by rendering plugin).\n\n   An action is a map with keys:\n\n   * `:type`: OPTIONAL. Defaults to :button. Rendering plugins define what types are supported.\n   * `:action`: REQUIRED. A side-effecting `(fn [report-instance row-props])`.\n   * `:label` : REQUIRED. A string or `(fn [report-instance row-props control] string-or-element?)`.\n   * `:disabled?` : OPTIONAL. A boolean or `(fn [report-instance row-props] boolean?)`.\n   * `:visible?` : OPTIONAL. A boolean or `(fn [report-instance row-props] boolean?)`.\n\n   Rendering plugins can expand this list of options as desired.\n\n   See also `row-query-inclusion`, `form-links`, and `link`.\"\n  :com.fulcrologic.rad.report/row-actions)\n\n(def ^:deprecated link\n  \"See `links`.\"\n  :com.fulcrologic.rad.report/links)\n\n(def links\n  \"A map from *qualified key* to a side-effecting `(fn [report-instance row-props]). Wraps the column value\n  from column-formatters.\n\n   See also `form-links`, `row-actions`, and `column-formatters`.\"\n  :com.fulcrologic.rad.report/links)\n\n(def denormalize?\n  \"Boolean. Defaults to false.\n\n   When set to true the auto-generated row component will not be given an ident, causing the rows of the\n   report to not be normalized in state. This can be a performance improvement for reports with lots of rows since\n   rendering will not have to denormalize them on render, and should be set to true for reports that contain\n   derived data.\n\n   Reports that show real entities should probably set this to false, since denormalized values will not update when\n   edited on the normalized entities (in forms).\"\n  :com.fulcrologic.rad.report/denormalize?)\n\n(def row-visible?\n  \"A `(fn [report-parameters row-props] boolean?).\n\n   When supplied the report will automatically use this predicate to filter the rows that are visible to the user. This\n   function is supplied with the current value of the report parameters (defined by `controls`)\n\n   See `controls`.\"\n  :com.fulcrologic.rad.report/row-visible?)\n\n(def compare-rows\n  \"A comparison function `(fn [sort-parameters row-a row-b] 0, 1, or -1)`.\n\n   ```\n   ro/compare-rows        (fn [{:keys [sort-by ascending?] :or {sort-by    :sales/date\n                                                                ascending? true}} row-a row-b]\n                            (let [a          (get row-a sort-by)\n                                  b          (get row-b sort-by)\n                                  fwd-result (compare a b)]\n                              (cond-> fwd-result\n                                (not ascending?) (-))))\n   ```\n\n   The sort parameters are set by `initial-sort-params`, the incoming route parameters, or user `controls`.\n\n   Sorting is always done against the filtered rows.\n\n   See `controls`, `initial-sort-params`, and `row-visible?`.\"\n  :com.fulcrologic.rad.report/compare-rows)\n\n(def initial-sort-params\n  \"A map that describes the reports initial sort order parameters. NOTE: parameters can be\n   overridden by route parameters.\n\n   The map contains:\n\n   * `:sort-by` - The qualified key of the column that is the default sort order. This just marks the column heading.\n   * `:sortable-columns` - A set (required) of the columns that should offer sort controls.\n   * `:ascending?` - A boolean indicating if the order should be ascending, default is true.\n\n   ```\n   ro/initial-sort-params {:sort-by :account/name\n                           :sortable-columns #{:account/name :account/email}\n                           :ascending? true} ; ascending\n   ```\n   \"\n  :com.fulcrologic.rad.report/initial-sort-params)\n\n(def paginate?\n  \"Turn on pagination IF the rendering layout from your UI plugin supports it.\"\n  :com.fulcrologic.rad.report/paginate?)\n\n(def page-size\n  \"The number of results per page, if your rendering plugin supports pagination and it is turned on. Can also be a\n   `(fn [uism-env] page-size)`\"\n  :com.fulcrologic.rad.report/page-size)\n\n(def column-heading\n  \"ATTRIBUTE OPTION.  A string or `(fn [report-instance] string-or-element?)`.\n\n  Specify the default column heading for an attribute. Overridden by `column-headings`.\n\n  Rendering plugins may or may not allow non-string return values from the function version.\"\n  :com.fulcrologic.rad.report/column-heading)\n\n(def raw-result-xform\n  \"A function that will be called when the report is loaded/refreshed and can transform (or augment) the network result into\n   the normalized form expected by the report. This is useful when it is more convenient to implement Pathom resolvers\n   that return that data in a shape different from that needed, or when you'd like the raw result to have some\n   pre-processing done on it before presentation.\n\n   If supplied it should be a `(fn [report-class raw-network-result] updated-result)`.\n\n   For example, you might use a `ro/source-attribute` of `:invoice-statistics`, and `ro/columns` of\n   `[date-groups gross-sales item-count]`. However, the pathom implementation of groupings will be most optimal\n   if you can do the groupings at the `invoice-statistics` resolver, and then have each nested resolver report\n   the values for the groupings as a vector, like so:\n\n   ```\n   {:invoice-statistics ; (1)\n    {:invoice-statistics/date-groups [\\\"1/1/2020\\\" \\\"2/1/2020\\\" \\\"3/1/2020\\\" \\\"4/1/2020\\\"]\n     :invoice-statistics/gross-sales [323M 313M 124M 884M]\n     :invoice-statistics/item-count  [10 11 5 42]}})\n   ```\n\n   Reports, however, expect the loaded data to have this shape:\n\n   ```\n   {:invoice-statistics  ; (2)\n     [{:invoice-statistics/date-groups 1/1/2020 :invoice-statistics/gross-sales 323M :invoice-statistics/item-count 10}\n      {:invoice-statistics/date-groups 2/1/2020 :invoice-statistics/gross-sales 313M :invoice-statistics/item-count 11}\n      ...]}\n   ```\n\n   If so, you must provide this option in order to convert (1) into (2). Since the above transform is commonly useful\n   when implementing with Pathom it is included in RAD as `report/rotate-result`.\n\n   IMPORTANT: IF you return a result like (1) you will also have to set `ro/denormalize?` to false or your raw data will\n   be mangled by normalization.\n\n   This option can also be used to take some result and do statistical roll-ups on the client. For example, you could\n   include a virtual column (e.g. a `defattr` of `row-total` that has no representation on the server, and will result in no data on the\n   full-stack result). You could then use this function to calculate that value and plug it into the data just after load.\"\n  :com.fulcrologic.rad.report/raw-result-xform)\n\n(def rotate?\n  \"A boolean (or a `(fn [report-instance] boolean?)`). Requests that the UI rendering rotate the table. The first\n   column listed in the config will then become the column headings\n   and the remaining columns become the rows (with their column headers becoming row headers).\n\n   NOTE: Rotated tables do not support a custom row renderer. If you need to customize the look of rotation you will\n   have to take control of table rendering yourself.\n\n   WARNING: This option is a hint to the UI rendering layer. Your UI plugin may or may not support it, in which case this\n   option may be a no-op and you will have to write the rendering code in your table yourself.\"\n  :com.fulcrologic.rad.report/rotate?)\n\n(def machine\n  \"Override the state machine definition that is used to control this report. Defaults to report/report-machine, which\n   you can use as a basis of your replacement (a state machine definition is just a map).\"\n  :com.fulcrologic.rad.report/machine)\n\n(def post-process\n  \"A `(fn [uism-env] new-env)` that will be called just after rows have been sorted/filtered/paginated, but before\n  they have been rendered.  This option is particularly useful in mobile where you might want to transform the page\n  into a js data array for use with list views.\"\n  :com.fulcrologic.rad.report/post-process)\n\n(def BodyItem\n  \"The class that is used for rendering the rows of the report. If not supplied then one will be generated for you. This\n   key will be available on the resulting report, and can be used to obtain the row class for things like denormalizing\n   row data.\n\n   IMPORTANT: IF you supply a BodyItem, then IT becomes the normalizing query component for the rows. I.e. You MUST include\n   an ident and query on that component that at least aligns with row-pk.\"\n  :com.fulcrologic.rad.report/BodyItem)\n\n(def query-inclusions\n  \"A vector of things to add to the top-level report's query.\n\n   Example:\n\n   Imagine you need the ID of the current user for an action:\n\n   ```\n   ro/query-inclusions [:user/current-user-id]\n   ```\n\n  You can then access it in the report's body:\n\n  ```\n  (:user/current-user-id props)\n  ```\n\n  Notice that the report will _not load_ this data for you, you must\n  ensure their presence in the client DB yourself.\"\n  :com.fulcrologic.rad.report/query-inclusions)\n\n(def column-EQL\n  \"Attribute option. The EQL to use when querying for this attribute from the data model. This is useful when\n   the attribute is, for example, a recursive bag of data you'd like to resolve via a join. Defaults to the\n   keyword of the attribute itself. The most common value for this would be a map (to indicate an EQL join).\n\n   For example, say you have a report that is a list of product, but each of those products has inventory\n   in one or more locations (e.g. warehouses). You'd like to define an attribute for `:product/inventory`,\n   but just the prop alone isn't all you want to query for. Instead, you'd like the report to auto-include\n   the join:\n\n   ```\n   {:product/inventory [:location/name\n                        :inventory/quantity\n                        :inventory/unit-cost]}\n   ```\n\n   which is what you'd set this option to on that attribute.\n\n   Notice that the above will not normalize the data. That might be preferable for performance reasons. If you want the\n   data normalized then use `get-query` just as in component queries. For example in combination with `nc`:\n\n   ```\n   {:product/inventory (rc/get-query (rc/nc [:inventory/id ; remember to include the id for nc\n                                             :location/name\n                                             :inventory/quantity\n                                             :inventory/unit-cost]}\n   ```\"\n  :com.fulcrologic.rad.report/column-EQL)\n\n(def layout-style\n  \"Report option. Keyword. A HINT to the rendering plugin as to the preferred\n  layout of the report. The Semantic UI plugin, for example, predefines\n  :default and :list.  NOTE: If you change the layout style, then you will\n  also typically need to change `ro/row-style` as well or\n  supply your own BodyItem to render the rows.\n\n  Styles are extensible by installing additional controls into the control plugin map at application\n  start.\"\n  :com.fulcrologic.rad.report/layout-style)\n\n(def row-style\n  \"Report option. Keyword. A HINT to the rendering plugin as to the preferred\n   style of the rows. SUI plugin predefined :default and :list, but you\n   can install your own as well.\"\n  :com.fulcrologic.rad.report/row-style)\n\n(def load-cache-seconds\n  \"Report option. How many seconds should we consider data that was previously loaded in the report valid? When set\n   this will cause the initial report run (run-on-mount?) to be skipped if the report is already populated, and\n   the cache time has not expired.\"\n  :com.fulcrologic.rad.report/load-cache-seconds)\n\n(def report-loaded\n  \"A `(fn [uism-env] uism-env)` that will be threaded into the UISM handler of the report after it loads new data. This\n   function will be called as the *last* step, so all report data will be constructed (filtering, sorting, pagination).\n\n   You can do anything in this hook that you can do in a normal state machine. If you activate a new state different\n   from the default, it will override the default target state after load.\"\n  :com.fulcrologic.rad.report/report-loaded)\n\n(def load-cache-expired?\n  \"A `(fn [uism-env cache-looks-stale?] boolean?)`.\n\n  The load cache normally expires based on:\n\n  * The cache timeout expires.\n  * The source table of ::row-pk changes (in number of objects).\n\n  If this option is specified AND it returns a non-nil result, THEN it will be used as the cache expiration logic.\n  (NO NIL PUNNING!)\n\n  The function will receive the UISM env and a boolean indicating if the default\n  algorithm thinks the cache should be expired.\n  \"\n  :com.fulcrologic.rad.report/load-cache-expired?)\n\n(def on-select-row\n  \"A `(fn [report-instance row-props]) that is called when a user selects a report row. Support for\n   this option is dependent on the rendering plugin.\n\n   See also `form-links`, `links`, `row-actions`, and `column-formatters`.\"\n  :com.fulcrologic.rad.report/on-select-row)\n\n(def skip-filtering?\n  \"A boolean or `(fn [ control-values] boolean)` that can be used to short-circuit the filtering step. Normally,\n   if a `ro/row-visible?` option is set then that function will be called once for every row in your\n   report, which can cause a significant performance hit on large reports. This allows you to indicate\n   that the current filtering selection does not require this step.\n\n   `control-values` will be a map that contains the values of all of the controls that have one.\"\n  :com.fulcrologic.rad.report/skip-filtering?)\n\n(def load-options\n  \"A map (or `(fn [uism-env] map?)`) whose value will be merged with the options sent to the `uism/load` that\n   the default state machine uses to pull in the report data.\n\n   An example of where you might want to use this is when a row contains sub-elements that could be large\n   (data points, history, comments, etc.) that you wish to let the user expand and load on demand. In this\n   case you could add the `:without` option to prevent pre-loading those elements, and then manually code\n   the row rendering and use `load-field` to fill in the missing details on demand.\n\n   WARNING: These options allow you to OVERRIDE those that are normally sent. You should carefully review the\n   report machine's source code before using this option.\n   \"\n  :com.fulcrologic.rad.report/load-options)\n\n(def column-info\n  \"ATTRIBUTE OPTION.  A string or `(fn [report-instance] string-or-element?)`.\n\n  Specify additional info *about* the column, which can be rendered, for example, as a hover or info button.\"\n  :com.fulcrologic.rad.report/column-info)\n\n(def column-infos\n  \"A map from *qualified keyword* to information about the column, which can be a simple string or a `(fn [report-instance] string?)`\"\n  :com.fulcrologic.rad.report/column-infos)\n\n(def before-load\n  \"A UISM handler (fn [env] env') that will be run before loading the report's data.\"\n  :com.fulcrologic.rad.report/before-load)\n\n(def track-in-url?\n  \"Report option. Should the page number and other controls be tracked in the URL? Defaults to TRUE. Useful if embedding\n   a report into someething like a modal, where the URL parameters are not meant to affect or be modified by the content.\"\n  :com.fulcrologic.rad.report/track-in-url?)\n"]}