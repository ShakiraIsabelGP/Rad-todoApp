{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/components.cljc"],"mappings":"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","names":["p__88974","map__88975","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","com.fulcrologic.rad.rendering.semantic-ui.components/sui-format->user-format","multiple","value","cljs.core.into","cljs.core.map","com.fulcrologic.fulcro.algorithms.transit/transit-str->clj","com.fulcrologic.fulcro.algorithms.transit.transit_str__GT_clj","p__88977","map__88978","com.fulcrologic.rad.rendering.semantic-ui.components/user-format->sui-format","cljs.core/to-array","com.fulcrologic.fulcro.algorithms.transit/transit-clj->str","or__4126__auto__","cljs.core/boolean?","com.fulcrologic.fulcro.algorithms.transit.transit_clj__GT_str","com.fulcrologic.rad.rendering.semantic-ui.components/wrapped-onChange","props","userOnChange","_","v","e88980","and__4115__auto__","cljs.core/seq","e","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","options__56259__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__88986","com.fulcrologic.fulcro.components/props","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.components","js/com.fulcrologic.rad.rendering.semantic-ui.components.WrappedDropdown","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.components/WrappedDropdown","this","onChange","xform-options","cljs.core/memoize","options","cljs.core/clj->js","cljs.core.mapv","p__88982","map__88983","text","G__88985","xform-value","multiple?","map__88988","get-options","format-value","com.fulcrologic.fulcro.components.get_state","cljs.core.merge","cljs.core/boolean","e88990","string-value","p1__88981#","com.fulcrologic.semantic-ui.modules.dropdown.ui-dropdown/ui-dropdown","com.fulcrologic.rad.rendering.semantic-ui.components/ui-wrapped-dropdown","com.fulcrologic.fulcro.components.factory"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.components\n  (:require\n    #?@(:cljs\n        [[com.fulcrologic.fulcro.dom :as dom :refer [div label input]]\n         [com.fulcrologic.semantic-ui.modules.dropdown.ui-dropdown :refer [ui-dropdown]]]\n        :clj\n        [[com.fulcrologic.fulcro.dom-server :as dom :refer [div label input]]])\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.algorithms.transit :as ftransit]\n    [taoensso.timbre :as log]))\n\n(defn sui-format->user-format\n  \"Converts transit encoded value(s), used by Semantic UI, into CLJS datastructure.\"\n  [{:keys [multiple]} value]\n  (if multiple\n    (into [] (map ftransit/transit-str->clj value))\n    (ftransit/transit-str->clj value)))\n\n(defn user-format->sui-format [{:keys [multiple]} value]\n  \"Converts CLJS datastructure into transit encoded string(s), usable by Semantic UI.\"\n  (if multiple\n    (if value\n      (to-array (map ftransit/transit-clj->str value))\n      #js [])\n    (if (or value (boolean? value))\n      (ftransit/transit-clj->str value)\n      \"\")))\n\n(defn wrapped-onChange\n  \"Wraps userOnChange fn with try/catch and sui-form->user-format conversion.\"\n  [props userOnChange]\n  (fn [_ v]\n    #?(:cljs\n       (try\n         (if (and (.-value v) (seq (.-value v)))\n           (let [value (sui-format->user-format props (.-value v))]\n             (when (and value userOnChange) (userOnChange value)))\n           (userOnChange nil))\n         (catch :default e\n           (log/error e \"Unable to read dropdown value \" (when v (.-value v))))))))\n\n(defsc WrappedDropdown [this {:keys [onChange value multiple] :as props}]\n  {:initLocalState (fn [this]\n                     #?(:cljs\n                        (let [xform-options (memoize (fn [options]\n                                                       (clj->js (mapv (fn [{:keys [text value]}]\n                                                                        #js {:text text :value (some-> value (ftransit/transit-clj->str))})\n                                                                  options))))\n                              xform-value   (fn [multiple? value]\n                                              (user-format->sui-format {:multiple multiple?} value))]\n                          {:get-options  (fn [props] (xform-options (:options props)))\n                           :format-value (fn [props value] (xform-value (:multiple props) value))})))}\n  #?(:cljs\n     (let [{:keys [get-options format-value]} (comp/get-state this)\n           userOnChange onChange\n           options      (get-options props)\n           value        (format-value props value)\n           props        (merge\n                          {:search             true\n                           :selection          true\n                           :closeOnBlur        true\n                           :openOnFocus        true\n                           :selectOnBlur       true\n                           :selectOnNavigation true\n                           :multiple           (boolean multiple)}\n                          props\n                          {:value    value\n                           :options  options\n                           :onChange (fn [e v]\n                                       (try\n                                         (let [string-value (.-value v)\n                                               value        (if multiple\n                                                              (mapv #(when (seq %) (ftransit/transit-str->clj %)) string-value)\n                                                              (when (seq string-value) (ftransit/transit-str->clj string-value)))]\n                                           (when userOnChange\n                                             (userOnChange value)))\n                                         (catch :default e\n                                           (log/error \"Unable to read dropdown value \" e (when v (.-value v))))))})]\n       (ui-dropdown props))\n     :clj\n     (dom/div :.ui.selection.dropdown\n       (dom/input {:type \"hidden\"})\n       (dom/i :.dropdown.icon)\n       (dom/div :.default.text \"\")\n       (dom/div :.menu))))\n\n(def ui-wrapped-dropdown\n  \"Draw a SUI dropdown with the given props.  The arguments are identical to sui/ui-dropdown, but options and onChange\n  are auto-wrapped so that clojure data (e.g. keywords) can be used for the option :value fields. It also defaults\n  a number of things (:search, :closeOnBlue, openOnFocus, selectOnBlue, and :selectOnNavigation) to true, but you can\"\n  (comp/factory WrappedDropdown))\n\n"]}