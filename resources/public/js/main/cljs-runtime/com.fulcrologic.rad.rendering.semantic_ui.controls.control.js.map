{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/controls/control.cljc"],"mappings":";AAYA,AAAA,AAAA;AAAA,AAAAA,AAAA,AAAA,AAC0B,AAAKmB,AAAEA,AAAEA;AAAT,AAAA;AAD1B,AAAA,AAAgBA;AAAhB,AAAA,AAAAlB,AAAA,AAAgBkB;AAAhB,AAAA,AAAAjB,AAAA,AAAAC,AAAAA,AAAAA,AAAgBgB,AAAAA;AAAhBjB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAE,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAAJ,AAAAA;AAAAA,AAA0EsB;AAA1E,AAAAjB,AAAAL,AAAA,AAA0BkB;AAA1B,AAAAb,AAAAL,AAAA,AAAmCmB;AAAnC,AAAAd,AAAAL,AAAA,AAA2CoB;AAA3C,AAAAf,AAAAL,AAAA,AAAuDqB;AAAvD,AAEE,AAAMG,AAAS,AAACC,AAA2BP;AAA3CK,AACgF,AAAClB,AAAImB,AAASJ,AAAYD;AAD1GI,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArB,AAAA,AAAAqB,AAAA,AAAA,AAAA,AAAA,AAAApB,AAAAC,AAAAmB,AAAAA;AAAAA,AACuEJ;AADvE,AAAAd,AAAAkB,AAAA,AACcG;AADd,AAAArB,AAAAkB,AAAA,AACoBI;AADpB,AAAAtB,AAAAkB,AAAA,AAC6BK;AAD7B,AAAAvB,AAAAkB,AAAA,AACoCM;AADpC,AAAAxB,AAAAkB,AAAA,AAC8CO;AAD9C,AAAAzB,AAAAkB,AAAA,AACuDQ;AADvD,AAEE,AAAI,AAAAC,AAAKX;AAAL,AAAA,AAAAW;AAAmBb;;AAAnBa;;;AACF,AAAMN,AAAc,AAACO,AAAGP,AAAMR;AACxBW,AAAU,AAACI,AAAGJ,AAAUX;AACxBY,AAAU,AAAAI,AAAI,AAAA,AAAMJ;AAAV,AAAA,AAAAI;AAAAA;;AAAoB,AAACD,AAAGH,AAASZ;;;AAC3CiB,AAAU,AAACC,AAAsBlB,AAASE;AAC1CO,AAAU,AAAKU;AAAL,AACE,AAACC,AAAuBpB,AAASE,AAAYiB;;AAC7C,AAAMV;AAAN,AACE,AAACA,AAAAA,AAAAA,AAAST,AAAAA,AAASmB,AAAAA;;AADrB;;AAEA,AAAMT;AAAN,AACE,AAACA,AAAAA,AAAAA,AAAOV,AAAAA;;AADV;;;AARlB,AAUE,AAAMY;AAAN,AACE,AAAAS,AAAA,AAAA,AAAA,AAAA,AAA0B,AAAKnB,AAC7B,AAAAmB,AAAA,AAAA,AAAA,AAAWb,AACX,AAAAc,AAAelB;AAAfmB,AAA0B,AAAA,AAAA,AAAA,AAAA,AAACC,AAAMX,AACOF,AACAM,AACAR;AAHxC,AAAA,AAAAa,AAAAC,AAAAD,AAAAC,AAACpB,AAAAA,AAAAA;AAFH;;AADF;;;AAOF,AAAAsB,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA;;;;AAtBN,AAAA,AAAA,AAAAvC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA;;;AAAA,AAAAC,AAAA,AAAAT,AAAAP,AAAA,AAAOkB;;;AAAP,AAAAD,AAAA,AAAAjB,AAAOkB;AAwBP,AAAK8B,AAAW,AAAA,AAAA,AAAA,AAACC,AAAa/B","names":["options__56259__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__89182","com.fulcrologic.fulcro.components/props","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.controls","js/com.fulcrologic.rad.rendering.semantic-ui.controls.control","js/com.fulcrologic.rad.rendering.semantic-ui.controls.control.Control","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.controls.control/Control","_","instance","control","control-key","input-factory","report-env","map__89184","controls","com.fulcrologic.rad.control.component_controls","label","onChange","action","disabled?","visible?","user-props","and__4115__auto__","com.fulcrologic.rad.options_util._QMARK__BANG_","or__4126__auto__","value","com.fulcrologic.rad.control/current-value","new-value","com.fulcrologic.rad.control/set-parameter!","com.fulcrologic.fulcro.dom.macro_create_element","G__89186","G__89187","cljs.core.merge","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","com.fulcrologic.rad.rendering.semantic-ui.controls.control/ui-control","com.fulcrologic.fulcro.components.factory"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.controls.control\n  (:require\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.ui-state-machines :as uism]\n    [com.fulcrologic.rad.options-util :refer [?!]]\n    [com.fulcrologic.guardrails.core :refer [>defn =>]]\n    [com.fulcrologic.rad.report :as report]\n    [com.fulcrologic.rad.control :as control]\n    #?(:cljs [com.fulcrologic.fulcro.dom :as dom]\n       :clj  [com.fulcrologic.fulcro.dom-server :as dom])\n    [taoensso.timbre :as log]))\n\n(defsc Control [_ {:keys [instance control control-key input-factory] :as report-env}]\n  {:shouldComponentUpdate (fn [_ _ _] true)}\n  (let [controls (control/component-controls instance)\n        {:keys [label onChange action disabled? visible? user-props] :as control} (get controls control-key control)]\n    (if (and input-factory control)\n      (let [label     (or (?! label instance))\n            disabled? (?! disabled? instance)\n            visible?  (or (nil? visible?) (?! visible? instance))\n            value     (control/current-value instance control-key)\n            onChange  (fn [new-value]\n                        (control/set-parameter! instance control-key new-value)\n                        (when onChange\n                          (onChange instance new-value))\n                        (when action\n                          (action instance)))]\n        (when visible?\n          (dom/div :.ui.field {:key (str control-key)}\n            (dom/label label)\n            (input-factory report-env (merge user-props\n                                        {:disabled? disabled?\n                                         :value     value\n                                         :onChange  onChange})))))\n      (log/error \"Cannot render control. Missing input factory or control definition.\"))))\n\n(def ui-control (comp/factory Control {:keyfn :control-key}))\n"]}