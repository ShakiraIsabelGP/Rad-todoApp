{"version":3,"sources":["com/fulcrologic/rad/semantic_ui_options.cljc"],"mappings":";AA2BA;;;;AAAA,AAAKA;AAKL;;;;;;AAAA,AAAKC;AAOL;;;;;;AAAA,AAAKC;AAOL;;;;;;;;;;;;;;AAAA,AAAKC;AAeL;;;;;;;;;;;;;AAAA,AAAKC;AAcL;;;;;;AAAA,AAAKC;AAOL;;;;;;AAAA,AAAKC;AAOL;;;;;;AAAA,AAAKC;AAOL;;;;;AAAA,AAAKC;AAML;;;;;AAAA,AAAKC;AAML;;;;;;;;AAAA,AAAKC;AASL;;;;;;;;AAAA,AAAKC;AASL;;;AAAA,AAAKC;AAIL,AAAA;;;;;AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAIFM,AAAIC;AAJR,AAKG,AAAMC,AAAe,AAACC,AAAcH;AAC9BI,AAAe,AAAAC,AAAQH;AAARG,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAAA;AAAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AAEEC;AAFF,AAAA,AAAA,AAAAD,AAAA;AAAA;;AAAA,AAAA,AAAAA;;;AAIfE,AAAe,AAACC,AACCJ,AACA,AAAA,AAAA,AAACK,AAAAA,AAAAA,AAAuBT,AAAAA;AAP/C,AAQE,AAAI,AAACU,AAAIT;AACP,AAACU,AAAOJ,AAAQ,AAACK,AAAIX;;AACrBM;;;;AAfP,AAAA,AAAA,AAAMb;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAiBA;;;;;;;AAAA,AAAMkB,AAMHX,AAAIK;AANP,AAOE,AAAA,AAACO,AAAM,AAAA,AAAkDZ,AACvDa,AAEAR","names":["com.fulcrologic.rad.semantic-ui-options/rendering-options","com.fulcrologic.rad.semantic-ui-options/report-action-button-grouping","com.fulcrologic.rad.semantic-ui-options/report-row-button-grouping","com.fulcrologic.rad.semantic-ui-options/report-row-button-renderer","com.fulcrologic.rad.semantic-ui-options/action-button-render","com.fulcrologic.rad.semantic-ui-options/layout-class","com.fulcrologic.rad.semantic-ui-options/controls-class","com.fulcrologic.rad.semantic-ui-options/body-class","com.fulcrologic.rad.semantic-ui-options/report-table-class","com.fulcrologic.rad.semantic-ui-options/report-rotated-table-class","com.fulcrologic.rad.semantic-ui-options/report-table-header-class","com.fulcrologic.rad.semantic-ui-options/report-table-cell-class","com.fulcrologic.rad.semantic-ui-options/selectable-table-rows?","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","com.fulcrologic.rad.semantic-ui-options/get-rendering-options","seq88513","G__88514","cljs.core/first","cljs.core/next","self__4723__auto__","c","ks","app","com.fulcrologic.fulcro.components/any->app","global-options","G__88515","cljs.core/deref","options","cljs.core.merge","com.fulcrologic.fulcro.components/component-options","cljs.core/seq","cljs.core.get_in","cljs.core/vec","com.fulcrologic.rad.semantic-ui-options/set-global-rendering-options!","cljs.core.swap_BANG_","cljs.core/assoc"],"sourcesContent":["(ns com.fulcrologic.rad.semantic-ui-options\n  \"Documented option keys for setting rendering-specific customization\n  options when using Semantic UI Plugin as your DOM renderer.\n\n  ALL options MUST appear under the rendering options key:\n\n  ```\n  (ns ...\n    (:require\n       [com.fulcrologic.rad.semantic-ui-options :as suo]\n       ...))\n\n  (defsc-report Report [this props]\n    {suo/rendering-options { ... }}}\n  ```\n\n  Most of the options in this file can be given a global default using\n\n  ```\n  (set-global-rendering-options! fulcro-app options)\n  ```\n\n  where the `options` is a map of option keys/values.\n  \"\n  (:require\n    [com.fulcrologic.fulcro.components :as comp]))\n\n(def rendering-options\n  \"Top-level key for specifying rendering options. All\n   SUI customization options MUST appear under this key.\"\n  ::rendering-options)\n\n(def report-action-button-grouping\n  \"A string or `(fn [report-instance] string?)`.\n   CSS class(es) to put in the div that surrounds the action buttons.\n\n   Defaults to 'ui right floated buttons'.\"\n  ::report-action-button-grouping)\n\n(def report-row-button-grouping\n  \"A string or `(fn [report-instance] string?)`.\n   CSS class(es) to put in the div that surrounds the action buttons on a table row.\n\n   Defaults to 'ui buttons'.\"\n  ::report-row-button-grouping)\n\n(def report-row-button-renderer\n  \"A `(fn [instance row-props {:keys [key disabled?]}] dom-element)`.\n\n  * `instance` - the report instance\n  * `row-props` - the data props of the row\n  * `key` - a unique key that can be used for react on the element.\n  * `onClick` - a generated function according to the buton's action setting\n  * `disabled?`-  true if the calculation of your disabled? option is true.\n\n  Overrides the rendering of action button controls.\n\n  You must return a DOM element to render for the control. If you return nil then\n  the default (button) will be rendered.\"\n  ::report-row-button-renderer)\n\n(def action-button-render\n  \"A `(fn [instance {:keys [key control disabled? loading?]}] dom-element)`.\n\n  * `key` - the key you used to add it to the controls list.\n  * `control` - the map of options you gave for the control.\n  * `disabled?`-  true if the calculation of your disabled? option is true.\n  * `loading?` - true if the component is loading data.\n\n  Overrides the rendering of action button controls.\n\n  You must return a DOM element to render for the control. If you return nil then\n  the default (button) will be rendered.\"\n  ::action-button-render)\n\n(def layout-class\n  \"The CSS class of the div that holds the top-level layout of the report or form.  Defaults\n   to some variant of 'ui segment'.\n\n   A string or `(fn [instance] string?)`.\"\n  ::layout-class)\n\n(def controls-class\n  \"The CSS class of the div that holds the controls on layouts that have a control section. Defaults\n   to some variant of 'ui top attached segment'.\n\n   A string or `(fn [instance] string?)`.\"\n  ::controls-class)\n\n(def body-class\n  \"The CSS class of the div that holds the actual body of the page (e.g. form or report).\n   Defaults to some variant of 'ui attached segment'.\n\n   A string or `(fn [instance] string?)`.\"\n  ::body-class)\n\n(def report-table-class\n  \"The CSS class of generated report tables. Defaults to 'ui selectable table'.\n\n  A string or `(fn [report-instance] string?)`.\"\n  ::report-table-class)\n\n(def report-rotated-table-class\n  \"The CSS class of generated report tables that are rotated. Defaults to 'ui compact collapsing definition selectable table'.\n\n  A string or `(fn [report-instance] string?)`.\"\n  ::report-rotated-table-class)\n\n(def report-table-header-class\n  \"The CSS class of headers in a table-style report. Data cells defaults to nothing.\n   Action buttons are have a column index and default to 'collapsing'.\n\n   A `(fn [report-instance zero-based-column-index] string?)`.\n\n   NOTE: Action buttons are add and have a column index. They default to 'collapsing'\"\n  ::report-table-header-class)\n\n(def report-table-cell-class\n  \"The CSS class of cells in a table-style report. Defaults to nothing for normal tables, and 'right aligned' for\n   rotated ones. Action buttons are have a column index and default to 'collapsing'.\n\n  A `(fn [report-instance zero-based-column-index] string?)`.\n\n  \"\n  ::report-table-cell-class)\n\n(def selectable-table-rows?\n  \"A boolean. When true the table will support click on a row to affix a highlight to that row.\"\n  ::selectable-table-rows?)\n\n(defn get-rendering-options\n  \"Get rendering options from a mounted component `c`.\n\n   WARNING: If c is a class, then global overrides will not be honored.\"\n  ([c & ks]\n   (let [app            (comp/any->app c)\n         global-options (some-> app\n                          :com.fulcrologic.fulcro.application/runtime-atom\n                          deref\n                          ::rendering-options)\n         options        (merge\n                          global-options\n                          (comp/component-options c ::rendering-options))]\n     (if (seq ks)\n       (get-in options (vec ks))\n       options))))\n\n(defn set-global-rendering-options!\n  \"Set rendering options on the application such that they serve as *defaults*.\n\n  The `options` parameter to this function MUST NOT have the key suo/rendering-options, but\n  should instead just have the parameters themselves (e.g. ::suo/action-button-renderer).\n  \"\n  [app options]\n  (swap! (:com.fulcrologic.fulcro.application/runtime-atom app)\n    assoc\n    ::rendering-options\n    options))"]}