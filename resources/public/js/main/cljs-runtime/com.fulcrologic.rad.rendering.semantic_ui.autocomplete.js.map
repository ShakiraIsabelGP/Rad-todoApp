{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/autocomplete.cljc"],"mappings":";AAwBA,AAAA,AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAA0Bc;AAA1B,AAAA,AAAA,AAAA;AAAA,AAAA,AAA0BA;AAA1B,AAAA,AAAAb,AAAA,AAA0Ba;AAA1B,AAAA,AAAA,AAAAZ,AAAAA,AAAAA,AAA0BY,AAAAA,AAAEA;AAA5B,AAAA;;;AAAA,AAAA,AAAA,AAAAX,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA;;;AAAA,AAAAC,AAAA,AAAAC,AAAAX,AAAA,AAAOa;;;AAAP,AAAAD,AAAA,AAAAZ,AAAOa;AAEP,AAAA,AAAME,AAAOC;AAAb,AAEW,AAACC,AAAQD;;AAEpB,AAAA;;;AAAAE,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAX,AAAAW,AAAA,AAAwCe;AAAxC,AAAA1B,AAAAW,AAAA,AAA+CgB;AAA/C,AAAA,AAAA,AAAA,AAAAZ;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAJ,AAAA,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAAC,AAAAE,AAAAA;AAAA,AAAAhB,AAAAgB,AAAA,AACmBY;AADnB,AAAA,AAAAX,AAAAC;AAAAC,AAAA;AAAA,AAAA,AAAAD,AAAAC;;AAAA,AAAA,AAIY,AAAMU,AAAmB,AAAA,AAAAC,AAAC9B,AAAK4B,AAAMF;AAC/BK,AAAmB,AAAClB,AAAMmB,AACL,AAACC,AAAI,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvB,AAAA,AAAAuB,AAAA,AAAA,AAAA,AAAA,AAAAtB,AAAAC,AAAAqB,AAAAA;AAAA,AAAAnC,AAAAmC,AAAA,AAAaC;AAAb,AAAApC,AAAAmC,AAAA,AAAkBE;AAAlB,AAAA,AACaD,AAAY,AAACE,AAAOD;AAASR;AAH1E,AAIE,AAAAU,AAAA,AAAAC,AAAaZ;AAAb,AACE,AAAAY,AAACC,AAAOf,AACR,AAACgB,AAASf,AAAOI;;AAVjC,AAAA,AAAAb,AAAAD;;AAAA;AAAA,AAAA,AAAAG;AAAA,AAAA,AAAAC,AAAAH;AAAAI,AAAA;AAAA,AAAA,AAAAJ,AAAAI;;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAAJ,AAAA;AAAA,AAAA,AAAAG;AAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAE,AAAAA,AAAAL,AAAAK,AAAAL;;AAAA;;AAAA,AAAA,AAAAF,AAAAG;;;AAYA,AAAA,AAAA;AAAA,AAAAhC,AAAA,AAAA,AAGsB,AAAK4D;AAAL,AAEE,AAAAO,AAAyC,AAACjE,AAAAA,AAAAA,AAAW0D,AAAAA;AAArDO,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5C,AAAA,AAAA4C,AAAA,AAAA,AAAA,AAAA,AAAA3C,AAAAC,AAAA0C,AAAAA;AAAA,AAAAxD,AAAAwD,AAAA,AAA2BC;AAA3B,AAAA,AAAA,AACU,AAACC,AACC,AAAKC;AAAL,AACE,AAAAC,AACwC,AAACrE,AAAAA,AAAAA,AAAW0D,AAAAA;AADpDW,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhD,AAAA,AAAAgD,AAAA,AAAA,AAAA,AAAA,AAAA/C,AAAAC,AAAA8C,AAAAA;AAAA,AAAA5D,AAAA4D,AAAA,AAAOC;AAAP,AAAA7D,AAAA4D,AAAA,AAC2BE;AAD3B,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAASd,AAAKa,AAAW5D,AACeyD,AAEPG,AACmBD;AACzD,AAAAG,AAAIP;AAAJ,AAAA,AAAAO;AAAAA;;AAAA;;;AAfpC,AAgBsB,AAAKf;AAAL,AACE,AAAAgB,AACwC,AAAC1E,AAAAA,AAAAA,AAAW0D,AAAAA;AADpDgB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArD,AAAA,AAAAqD,AAAA,AAAA,AAAA,AAAA,AAAApD,AAAAC,AAAAmD,AAAAA;AAAA,AAAAjE,AAAAiE,AAAA,AAAOJ;AAAP,AAAA7D,AAAAiE,AAAA,AAC2BH;AACrBzB,AAAM,AAAA,AAAA,AAACS,AAAAA,AAAAA,AAAkBG,AAAAA;AAF/B,AAGE,AAAM,AAAAiB,AAAKJ;AAAL,AAAA,AAAAI;AAAgB7B;;AAAhB6B;;;AAAN,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACH,AAASd,AAAKa,AAAW5D,AACMmC,AAEEyB,AACmBD;;AALvD;;AApB1B,AAAA,AAA0BZ;AAA1B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA9C,AAAAwC;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA;AAAA,AAAA,AAA0BM;AAA1B,AAAA,AAAA3D,AAAA,AAA0B2D;AAA1B,AAAA,AAAAL,AAAA,AAAArD,AAAAA,AAAAA,AAA0B0D,AAAAA;AAA1BL,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhC,AAAA,AAAAgC,AAAA,AAAA,AAAA,AAAA,AAAA/B,AAAAC,AAAA8B,AAAAA;AAAAA,AAAqED;AAArE,AAAA3C,AAAA4C,AAAA,AAA0CM;AAA1C,AAAAlD,AAAA4C,AAAA,AAAwDf;AAAxDgB,AAAA,AAAAC,AAAAA,AAAAA,AAA0BG,AAAAA;AAA1BJ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjC,AAAA,AAAAiC,AAAA,AAAA,AAAA,AAAA,AAAAhC,AAAAC,AAAA+B,AAAAA;AAAA,AAAA7C,AAAA6C,AAAA,AAAoFR;AAApF,AAAArC,AAAA6C,AAAA,AAA0FM;AAA1F,AAAAnD,AAAA6C,AAAA,AAAgGO;AAAhG,AAAApD,AAAA6C,AAAA,AACoFQ;AADpF,AAAArD,AAAA6C,AAAA,AAC6FS;AAD7F,AAAAtD,AAAA6C,AAAA,AAEoFU;AAFpF,AA6BE,AAAMY,AAAM,AAAA,AAACC,AAAenB;AAA5B,AAIK,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAA,AAA4B,AAAA,AAAA,AAAA,AAAMhB,AAChC,AAAAgB,AAAA,AAAA,AAAA,AAAWlB,AAAM,AAAA,AAAA,AAAME,AAAS,AAAA,AAASC,AACzC,AAAIC,AACF,AAAA,AAAA,AAACe,AAAoBzC,AACrB,AAAA,AAAA,AAAA,AAAA,AAAC0C,AAEqC,AAACjC,AAAOD,AAMR,AAAKlC,AAAEE;AAAP,AACE,AAAMmE,AAAM,AAAA,AAAA,AAACC,AAAAA,AAAAA,AAAYpE,AAAAA;AAAzB,AACE,AAAC8D,AAAAA,AAAAA,AAAMK,AAAAA;AAVjD,AAAA,AACsC,AAAA,AAAI3C,AAAQA,AAUZ,AAAK1B,AAAEE;AAAP,AACE,AAAM+C;AAAN,AACE,AAAAsB,AAAU,AAAAC,AAAQ,AAAA,AAAA,AAACF,AAAAA,AAAAA,AAAYpE,AAAAA;AAArB,AAAA,AAAA,AAAAsE,AAAA;AAAA;;AAAA,AAAAA,AACEC;;;AADZ,AAAA,AAAAF,AAAAA,AAACtB,AAAAA,AAAAA;;AADH;;AAhB5C,AAII;;;AArCX,AAAA,AAAA,AAAA5D,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAkD;AAAA;AAAA,AAAA;;;AAAA,AAAAhD,AAAA,AAAAC,AAAAX,AAAA,AAAO2D;;;AAAP,AAAA/C,AAAA,AAAAZ,AAAO2D;AAqDP,AAAK6B,AAAsB,AAAA,AAAA,AAAA,AAACC,AAAsB9B;AAElD,AAAA;;;AAAA+B,AAAA,AAAAvE,AAAA,AAAA;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAsE,AAAA,AAAA,AAAA,AAAA,AAAAtE;AAAAsE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApE,AAAA,AAAAoE,AAAA,AAAA,AAAA,AAAA,AAAAnE,AAAAC,AAAAkE,AAAAA;AAAA,AAAAhF,AAAAgF,AAAA,AAAsCnB;AAAtC,AAAA,AAAA,AAAA,AAAAoB;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtE,AAAA,AAAAsE,AAAA,AAAA,AAAA,AAAA,AAAArE,AAAAC,AAAAoE,AAAAA;AAAA,AAAAlF,AAAAkF,AAAA,AACmBtD;AADnB,AAAA,AAAAuD,AAAAjE;AAAAkE,AAAA;AAAA,AAAA,AAAAlE,AAAAkE;;AAAA,AAAA,AAEI,AAAMvB;AAAN,AACE,AAAA,AAAA,AAACtB,AAAMX,AAAM2D,AAAqC1B;;AADpD;AAFJ,AAAA,AAAA3C,AAAAiE;;AAAA;AAAA,AAAA,AAAA/D;AAAA,AAAA,AAAAiE,AAAAnE;AAAAoE,AAAA;AAAA,AAAA,AAAApE,AAAAoE;;AAAA,AAAA,AAAA,AAAA/D,AAAA,AAAAC,AAAA,AAAA,AAAAJ,AAAA;AAAA,AAAA,AAAAG;AAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAE,AAAAA,AAAAL,AAAAK,AAAAL;;AAAA;;AAAA,AAAA,AAAAF,AAAAmE;;;AAKA,AAAA,AAAA;AAAA,AAAAhG,AAAA,AAAA,AAC0B,AAAK4D;AAAL,AAAA,AAAA,AAAsB,AAAC6C;AADjD,AAE0B,AAAK7C;AAAL,AACE,AAAMY,AAAG,AAAA,AAACO,AAAenB;AAAzB8C,AAC0B,AAACjD,AAAAA,AAAAA,AAAkBG,AAAAA;AAD7C8C,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnF,AAAA,AAAAmF,AAAA,AAAA,AAAA,AAAA,AAAAlF,AAAAC,AAAAiF,AAAAA;AAAA,AAAA/F,AAAA+F,AAAA,AACcF;AADdG,AAEkE,AAAA,AAAsBH;AAFxFG,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApF,AAAA,AAAAoF,AAAA,AAAA,AAAA,AAAA,AAAAnF,AAAAC,AAAAkF,AAAAA;AAAA,AAAAhG,AAAAgG,AAAA,AAE2BlC;AAF3B,AAAA9D,AAAAgG,AAAA,AAEsCvC;AAFtC,AAAAzD,AAAAgG,AAAA,AAEkDC;AAFlD,AAGE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAuBjD,AAAKD,AAA+Ca,AACAC,AACAL,AACAwC;;AAG9E,AAAA,AAAA,AAAA,AAACE,AAAqBlD;AAZlD,AAa0B,AAAK9C,AAAEA;AAAP,AAAA;AAb1B,AAAA,AAAAqF;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAD;AAAA,AAe0B,AAAKvC;AAAL,AACE,AAAA,AAACmD,AAAenD,AAAM,AAAAoD,AAAA,AAAA,AAAsB,AAAA,AAACjC,AAAenB;AAAtC,AAAA,AAAAoD,AAAAA,AAACtB,AAAAA,AAAAA;;;AACvB,AAACuB,AAAuBrD;AAjBpD,AAAA,AAA8BA;AAA9B,AAAA,AAAA;AAAA,AAAA,AAA8BA;AAA9B,AAAA,AAAA3D,AAAA,AAA8B2D;AAA9B,AAAA,AAAA,AAAA1D,AAAAA,AAAAA,AAA8B0D,AAAAA,AAAKN;AAAnC+C,AAAA,AAAA5C,AAAAA,AAAAA,AAA8BG,AAAAA;AAA9ByC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9E,AAAA,AAAA8E,AAAA,AAAA,AAAA,AAAA,AAAA7E,AAAAC,AAAA4E,AAAAA;AAAA,AAAA1F,AAAA0F,AAAA,AAAiDtE;AAAjD,AAAApB,AAAA0F,AAAA,AAAqDG;AAArD,AAmBE,AAAAU,AAAoD,AAAA,AAAsBV;AAA1EU,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3F,AAAA,AAAA2F,AAAA,AAAA,AAAA,AAAA,AAAA1F,AAAAC,AAAAyF,AAAAA;AAAA,AAAAvG,AAAAuG,AAAA,AAA2B9C;AAA3B,AAAAzD,AAAAuG,AAAA,AAAuCzC;AACjC2C,AAAmB,AAAA,AAAsBZ;AAD/CW,AAEoCpF;AAFpCoF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5F,AAAA,AAAA4F,AAAA,AAAA,AAAA,AAAA,AAAA3F,AAAAC,AAAA0F,AAAAA;AAAA,AAAAxG,AAAAwG,AAAA,AAEoBE;AACdrE,AAAuB,AAAC9C,AAAAA,AAAAA,AAAWmH,AAAAA,AAAe,AAAC1G,AAAIyG;AACvD5C,AAAmB,AAAA,AAACO,AAAenB;AACnCE,AAAmB,AAACwD,AAAiBvF,AAAIyE;AACzCtC,AAAmB,AAACqD,AAAgBF,AAAcb;AAClDxC,AAAmB,AAACwD,AAAAA,AAAAA,AAAoCzF,AAAAA,AAAIyE,AAAAA;AAC5DvC,AAAmB,AAAA,AAAA,AAAMD,AAAS,AAACyD,AAAAA,AAAAA,AAAoC1F,AAAAA,AAAIyE,AAAAA;AAC3EkB,AAAmB,AAAA,AAAA,AAACC,AAAOrE,AAAyBkB;AAT1D,AAYE,AAAAoD,AAAuB,AAAA,AAAA,AAAA,AAACE,AAAMJ,AACalD,AACOC,AACCL;AAHnDyD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIuB7E,AACAgB,AACAC,AACAH,AACAI,AACA,AAAK6D;AAAL,AAEK,AAAMA;AAAN,AAAuB,AAACC,AAAoBjG,AAAIqF,AAAEW;;AAAlD;;;AAX5B,AAAA,AAAAH,AAAAC,AAAAD,AAAAC,AAACrC,AAAAA,AAAAA;;;AA/BL,AAAA,AAAA,AAAArF,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAA8F;AAAA;AAAA,AAAA;;;AAAA,AAAA5F,AAAA,AAAAC,AAAAX,AAAA,AAAOuG;;;AAAP,AAAA3F,AAAA,AAAAZ,AAAOuG;AA4CP,AAAK0B,AAA2B,AAAA,AAAA,AAACC,AAA4B3B,AACnB,AAAKjD;AAAL,AAAY,AAAA,AAAA,AAAA,AAAIA;;AAE1D,AAAA,AAAA6E,AAAME,AAA2BtG;AAAjC,AAAA,AAAAqG,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7G,AAAA,AAAA6G,AAAA,AAAA,AAAA,AAAA,AAAA5G,AAAAC,AAAA2G,AAAAA;AAAAA,AAA2F5B;AAA3F,AAAA7F,AAAAyH,AAAA,AAAA,AAAmDE;AAAnD,AACE,AAAI,AAAA,AAACC,AAAQD;AACX,AAAAE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA;;AACA,AAAAC,AAAA,AAAA,AAAA,AAAkC5G,AAAeyE;AAAjD,AAAA,AAAAmC,AAAAA,AAACV,AAAAA,AAAAA","names":["options__50078__auto__","com.fulcrologic.fulcro.components/wrapped-render","com.fulcrologic.fulcro.components/props","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.autocomplete","js/com.fulcrologic.rad.rendering.semantic-ui.autocomplete.AutocompleteQuery","com.fulcrologic.fulcro.components/react-constructor","cljs.core.get","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.autocomplete/AutocompleteQuery","_","com.fulcrologic.rad.rendering.semantic-ui.autocomplete/to-js","v","cljs.core/clj->js","com.fulcrologic.rad.rendering.semantic-ui.autocomplete/normalize-options","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","map__62843","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","p__62845","map__62846","*after-render*-orig-val__62848","com.fulcrologic.fulcro.raw.components/*after-render*","*after-render*-temp-val__62849","env","*after-render*-orig-val__62853","*after-render*-temp-val__62854","temp__5735__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","source","target","state","options","cljs.core/deref","normalized-options","cljs.core/array","cljs.core.map","p__62850","map__62851","text","value","cljs.core.pr_str","cljs.core.swap_BANG_","s__53991__auto__","cljs.core.dissoc","cljs.core/assoc-in","props","map__62869","map__62870","com.fulcrologic.fulcro.components/get-computed","js/com.fulcrologic.rad.rendering.semantic-ui.autocomplete.AutocompleteField","com.fulcrologic.rad.rendering.semantic-ui.autocomplete/AutocompleteField","this","search-string","label","onChange","invalid?","validation-message","read-only?","map__62858","debounce-ms","com.fulcrologic.rad.options-util/debounce","s","map__62865","id","search-key","com.fulcrologic.fulcro.data_fetch.load_BANG_","or__4126__auto__","map__62867","and__4115__auto__","load!","com.fulcrologic.fulcro.components.get_state","com.fulcrologic.fulcro.dom.macro_create_element","goog.object/getValueByKeys","com.fulcrologic.semantic-ui.modules.dropdown.ui-dropdown/ui-dropdown","query","com.fulcrologic.fulcro.components/isoget","G__62876","G__62877","cljs.reader.read_string","com.fulcrologic.rad.rendering.semantic-ui.autocomplete/ui-autocomplete-field","com.fulcrologic.fulcro.components.computed_factory","com.fulcrologic.rad.rendering.semantic-ui.autocomplete/gc-autocomplete","map__62884","p__62886","map__62887","*after-render*-orig-val__62889","*after-render*-temp-val__62890","*after-render*-orig-val__62891","*after-render*-temp-val__62892","com.fulcrologic.fulcro.algorithms.normalized-state/remove-entity","params","com.fulcrologic.fulcro.components/make-state-map","map__62905","js/com.fulcrologic.rad.rendering.semantic-ui.autocomplete.AutocompleteFieldRoot","com.fulcrologic.rad.rendering.semantic-ui.autocomplete/AutocompleteFieldRoot","attribute","com.fulcrologic.rad.ids.new_uuid","map__62897","map__62898","minimum-input","com.fulcrologic.fulcro.algorithms.merge/merge-component!","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.register_root_BANG_","com.fulcrologic.fulcro.components.transact_BANG_","G__62904","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.deregister_root_BANG_","map__62907","map__62908","k","form-instance","com.fulcrologic.rad.form/field-label","com.fulcrologic.rad.form/read-only?","com.fulcrologic.rad.ui-validation/invalid-attribute-value?","com.fulcrologic.rad.ui-validation/validation-error-message","field","cljs.core.get_in","G__62911","G__62912","cljs.core.assoc","normalized-value","com.fulcrologic.rad.form/input-changed!","com.fulcrologic.rad.rendering.semantic-ui.autocomplete/ui-autocomplete-field-root","com.fulcrologic.fulcro.rendering.multiple_roots_renderer.floating_root_factory","p__62913","map__62914","com.fulcrologic.rad.rendering.semantic-ui.autocomplete/render-autocomplete-field","cardinality","cljs.core._EQ_","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","G__62916"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.autocomplete\n  (:require\n    #?@(:cljs\n        [[com.fulcrologic.fulcro.dom :as dom :refer [div label input]]\n         [goog.object :as gobj]\n         [cljs.reader :refer [read-string]]\n         [com.fulcrologic.semantic-ui.modules.dropdown.ui-dropdown :refer [ui-dropdown]]]\n        :clj\n        [[com.fulcrologic.fulcro.dom-server :as dom :refer [div label input]]])\n    [com.fulcrologic.rad.ids :as ids]\n    [com.fulcrologic.rad.ui-validation :as validation]\n    [com.fulcrologic.fulcro.rendering.multiple-roots-renderer :as mroot]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    [com.fulcrologic.fulcro.mutations :as m :refer [defmutation]]\n    [com.fulcrologic.fulcro.algorithms.merge :as merge]\n    [com.fulcrologic.rad.options-util :as opts]\n    [com.fulcrologic.rad.rendering.semantic-ui.components :refer [ui-wrapped-dropdown]]\n    [com.fulcrologic.rad.attributes :as attr]\n    [clojure.string :as str]\n    [taoensso.timbre :as log]\n    [com.fulcrologic.rad.form :as form]\n    [com.fulcrologic.fulcro.algorithms.normalized-state :as fns]))\n\n(defsc AutocompleteQuery [_ _] {:query [:text :value]})\n\n(defn to-js [v]\n  #?(:clj  v\n     :cljs (clj->js v)))\n\n(defmutation normalize-options [{:keys [source target]}]\n  (action [{:keys [state]}]\n    #?(:clj true\n       :cljs\n            (let [options            (get @state source)\n                  normalized-options (apply array\n                                       (map (fn [{:keys [text value]}]\n                                              #js {:text text :value (pr-str value)}) options))]\n              (fns/swap!-> state\n                (dissoc source)\n                (assoc-in target normalized-options))))))\n\n(defsc AutocompleteField [this {:ui/keys [search-string options] :as props} {:keys [value label onChange\n                                                                                    invalid? validation-message\n                                                                                    read-only?]}]\n  {:initLocalState    (fn [this]\n                        ;; TASK: props not making it...fix that, or debounce isn't configurable.\n                        (let [{:autocomplete/keys [debounce-ms]} (comp/props this)]\n                          {:load! (opts/debounce\n                                    (fn [s]\n                                      (let [{id                 ::autocomplete-id\n                                             :autocomplete/keys [search-key]} (comp/props this)]\n                                        (df/load! this search-key AutocompleteQuery\n                                          {:params               {:search-string s}\n                                           :post-mutation        `normalize-options\n                                           :post-mutation-params {:source search-key\n                                                                  :target [::autocomplete-id id :ui/options]}})))\n                                    (or debounce-ms 200))}))\n   :componentDidMount (fn [this]\n                        (let [{id                 ::autocomplete-id\n                               :autocomplete/keys [search-key]} (comp/props this)\n                              value (comp/get-computed this :value)]\n                          (when (and search-key value)\n                            (df/load! this search-key AutocompleteQuery\n                              {:params               {:only value}\n                               :post-mutation        `normalize-options\n                               :post-mutation-params {:source search-key\n                                                      :target [::autocomplete-id id :ui/options]}}))))\n   :query             [::autocomplete-id :ui/search-string :ui/options :autocomplete/search-key\n                       :autocomplete/debounce-ms :autocomplete/minimum-input]\n   :ident             ::autocomplete-id}\n  (let [load! (comp/get-state this :load!)]\n    #?(:clj\n       (dom/div \"\")\n       :cljs\n       (dom/div :.field {:classes [(when invalid? \"error\")]}\n         (dom/label label (when invalid? (str \" \" validation-message)))\n         (if read-only?\n           (gobj/getValueByKeys options 0 \"text\")\n           (ui-dropdown #js {:search             true\n                             :options            (if options options #js [])\n                             :value              (pr-str value)\n                             :selection          true\n                             :closeOnBlur        true\n                             :openOnFocus        true\n                             :selectOnBlur       true\n                             :selectOnNavigation true\n                             :onSearchChange     (fn [_ v]\n                                                   (let [query (comp/isoget v \"searchQuery\")]\n                                                     (load! query)))\n                             :onChange           (fn [_ v]\n                                                   (when onChange\n                                                     (onChange (some-> (comp/isoget v \"value\")\n                                                                 read-string))))}))))))\n\n(def ui-autocomplete-field (comp/computed-factory AutocompleteField {:keyfn ::autocomplete-id}))\n\n(defmutation gc-autocomplete [{:keys [id]}]\n  (action [{:keys [state]}]\n    (when id\n      (swap! state fns/remove-entity [::autocomplete-id id]))))\n\n(defsc AutocompleteFieldRoot [this props {:keys [env attribute]}]\n  {:initLocalState        (fn [this] {:field-id (ids/new-uuid)})\n   :componentDidMount     (fn [this]\n                            (let [id (comp/get-state this :field-id)\n                                  {:keys [attribute]} (comp/get-computed this)\n                                  {:autocomplete/keys [search-key debounce-ms minimum-input]} (::form/field-options attribute)]\n                              (merge/merge-component! this AutocompleteField {::autocomplete-id           id\n                                                                              :autocomplete/search-key    search-key\n                                                                              :autocomplete/debounce-ms   debounce-ms\n                                                                              :autocomplete/minimum-input minimum-input\n                                                                              :ui/search-string           \"\"\n                                                                              :ui/options                 #js []}))\n                            (mroot/register-root! this {:initialize? true}))\n   :shouldComponentUpdate (fn [_ _] true)\n   :initial-state         {::autocomplete-id {}}\n   :componentWillUnmount  (fn [this]\n                            (comp/transact! this [(gc-autocomplete {:id (comp/get-state this :field-id)})])\n                            (mroot/deregister-root! this))\n   :query                 [::autocomplete-id]}\n  (let [{:autocomplete/keys [debounce-ms search-key]} (::form/field-options attribute)\n        k                  (::attr/qualified-key attribute)\n        {::form/keys [form-instance]} env\n        value              (-> (comp/props form-instance) (get k))\n        id                 (comp/get-state this :field-id)\n        label              (form/field-label env attribute)\n        read-only?         (form/read-only? form-instance attribute)\n        invalid?           (validation/invalid-attribute-value? env attribute)\n        validation-message (when invalid? (validation/validation-error-message env attribute))\n        field              (get-in props [::autocomplete-id id])]\n    ;; Have to pass the id and debounce early since the merge in mount won't happen until after, which is too late for initial\n    ;; state\n    (ui-autocomplete-field (assoc field\n                             ::autocomplete-id id\n                             :autocomplete/search-key search-key\n                             :autocomplete/debounce-ms debounce-ms)\n      {:value              value\n       :invalid?           invalid?\n       :validation-message validation-message\n       :label              label\n       :read-only?         read-only?\n       :onChange           (fn [normalized-value]\n                             #?(:cljs\n                                (when normalized-value (form/input-changed! env k normalized-value))))})))\n\n(def ui-autocomplete-field-root (mroot/floating-root-factory AutocompleteFieldRoot\n                                  {:keyfn (fn [props] (-> props :attribute ::attr/qualified-key))}))\n\n(defn render-autocomplete-field [env {::attr/keys [cardinality] :or {cardinality :one} :as attribute}]\n  (if (= :many cardinality)\n    (log/error \"Cannot autocomplete to-many attributes with renderer\" `render-autocomplete-field)\n    (ui-autocomplete-field-root {:env env :attribute attribute})))\n\n"]}