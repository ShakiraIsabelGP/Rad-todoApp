{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/form.cljc"],"mappings":"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","names":["p__62503","p__62504","p__62505","map__62506","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__62507","map__62508","com.fulcrologic.rad.rendering.semantic-ui.form/render-to-many","form-instance","env","k","attr","subforms","options","map__62512","add-position","ui","title","can-delete?","can-add?","added-via-upload?","ref-container-class","form-instance-props","com.fulcrologic.fulcro.components/props","read-only?","com.fulcrologic.rad.form/read-only?","add?","com.fulcrologic.rad.options_util._QMARK__BANG_","delete?","item","items","or__4126__auto__","G__62515","com.fulcrologic.fulcro.components/component-options","invalid?","com.fulcrologic.rad.ui-validation/invalid-attribute-value?","validation-message","com.fulcrologic.rad.ui-validation/validation-error-message","add","order","cljs.core/Keyword","com.fulcrologic.fulcro.dom.macro_create_element","evt","map__62516","new-id","com.fulcrologic.fulcro.algorithms.tempid.tempid","js-file","com.fulcrologic.rad.blob/evt->js-files","cljs.core/first","attributes","id-attr","id-key","qualified-key","sha-attr","cljs.core.filter","target","cljs.core.conj","com.fulcrologic.fulcro.components/get-ident","new-entity","com.fulcrologic.fulcro.algorithms.form_state.add_form_config","com.fulcrologic.fulcro.algorithms.merge.merge_component_BANG_","com.fulcrologic.rad.blob/upload-file!","_","com.fulcrologic.rad.form.add_child_BANG_","cljs.core.assoc","com.fulcrologic.fulcro.dom/macro-create-element*","ui-factory","com.fulcrologic.fulcro.components.computed_factory","cljs.core/second","com.fulcrologic.fulcro.dom.html-entities/nbsp","cljs.core._EQ_","cljs.core/seq","cljs.core.mapv","props","G__62518","G__62519","cljs.core.merge","p__62520","p__62521","p__62522","map__62523","map__62524","map__62525","com.fulcrologic.rad.rendering.semantic-ui.form/render-to-one","map__62529","form-props","G__62532","std-props","G__62533","G__62534","js/tr","p__62535","map__62536","com.fulcrologic.rad.rendering.semantic-ui.form/standard-ref-container","cardinality","p__62551","p__62552","p__62553","map__62554","map__62555","map__62556","com.fulcrologic.rad.rendering.semantic-ui.form/render-single-file","map__62583","parent","label","com.fulcrologic.rad.form/field-label","G__62589","G__62590","options__50078__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__62619","map__62620","map__62621","map__62622","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.form","js/com.fulcrologic.rad.rendering.semantic-ui.form.ManyFiles","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.form/ManyFiles","this","master-form","cljs.core/rand-int","map__62643","sort-children","G__62645","G__62646","G__62648","upload-id","com.fulcrologic.fulcro.components.get_state","map__62669","com.fulcrologic.fulcro.components.set_state_BANG_","G__62671","G__62672","js/trc","com.fulcrologic.rad.rendering.semantic-ui.form/ui-many-files","com.fulcrologic.fulcro.components.factory","p__62673","map__62674","attribute","p__62676","map__62677","com.fulcrologic.rad.rendering.semantic-ui.form/file-ref-container","G__62679","p__62680","map__62681","com.fulcrologic.rad.rendering.semantic-ui.form/render-attribute","map__62683","cljs.core/contains?","render-ref","com.fulcrologic.rad.form/ref-container-renderer","com.fulcrologic.rad.form/render-field","com.fulcrologic.rad.rendering.semantic-ui.form/n-fields-string","com.fulcrologic.rad.rendering.semantic-ui.form/attribute-map","cljs.core/memoize","cljs.core.reduce","p__62685","map__62686","m","com.fulcrologic.rad.rendering.semantic-ui.form/render-layout*","k->attribute","layout","js/goog.DEBUG","cljs.core/vector?","cljs.core/every?","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","e62688","cljs.core.into","cljs.core.map_indexed","idx","row","G__62689","cljs.core/count","col","b2__11668__auto__","G__62690","G__62691","com.fulcrologic.rad.control.render_control","p__62692","map__62693","com.fulcrologic.rad.rendering.semantic-ui.form/render-layout","map__62696","com.fulcrologic.fulcro.components/get-computed","js/com.fulcrologic.rad.rendering.semantic-ui.form.TabbedLayout","com.fulcrologic.rad.rendering.semantic-ui.form/TabbedLayout","tabbed-layout","e62695","k->attr","tab-labels","cljs.core/filterv","cljs.core/string?","tab-label->layout","cljs.core.map","cljs.core/vec","cljs.core.partition","cljs.core.partition_by","com.fulcrologic.fulcro.components/component-name","map__62698","map__62699","tab-details","current-tab","active-layout","G__62702","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.rad.rendering.semantic-ui.form/ui-tabbed-layout","map__62704","js/com.fulcrologic.rad.rendering.semantic-ui.form.StandardFormContainer","com.fulcrologic.rad.rendering.semantic-ui.form/StandardFormContainer","computed-props","map__62706","nested?","cljs.core.not_EQ_","read-only-form?","com.fulcrologic.rad.form.invalid_QMARK_","render-fields","com.fulcrologic.rad.form/form-layout-renderer","com.fulcrologic.rad.rendering.semantic-ui.form/standard-form-layout-renderer","valid?","com.fulcrologic.rad.form.valid_QMARK_","dirty?","com.fulcrologic.fulcro.algorithms.form_state.dirty_QMARK_","cljs.core/not","com.fulcrologic.rad.form.delete_child_BANG_","map__62708","action-buttons","controls","com.fulcrologic.rad.form/standard-action-buttons","com.fulcrologic.rad.semantic_ui_options.get_rendering_options","com.fulcrologic.rad.semantic-ui-options/layout-class","com.fulcrologic.rad.semantic-ui-options/controls-class","p1__62703#","cljs.core.keep","com.fulcrologic.rad.rendering.semantic-ui.form/standard-form-container","p__62710","map__62711","map__62713","p__62715","map__62716","com.fulcrologic.rad.rendering.semantic-ui.form/file-icon-renderer*","map__62718","sha-key","file-key","com.fulcrologic.rad.blob/filename-key","url-key","com.fulcrologic.rad.blob/url-key","filename","failed?","com.fulcrologic.rad.blob/failed-upload?","pct","com.fulcrologic.rad.blob/upload-percentage","sha","url","com.fulcrologic.rad.blob/uploading?","com.fulcrologic.fulcro.application/abort!","G__62721","G__62722","G__62723","G__62724","G__62725","fexpr__62720","com.fulcrologic.fulcro.dom/span","com.fulcrologic.fulcro.dom/a","com.fulcrologic.rad.blob/blob-downloadable?","js/confirm","com.fulcrologic.fulcro.dom.events/stop-propagation!","com.fulcrologic.fulcro.dom.events/prevent-default!","com.fulcrologic.rad.rendering.semantic-ui.form/file-icon-renderer"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.form\n  (:require\n    [com.fulcrologic.fulcro-i18n.i18n :refer [tr trc]]\n    [com.fulcrologic.rad.attributes :as attr]\n    [com.fulcrologic.rad.options-util :refer [?! narrow-keyword]]\n    [com.fulcrologic.rad.ui-validation :as validation]\n    [com.fulcrologic.rad.form :as form]\n    [com.fulcrologic.rad.control :as control]\n    [com.fulcrologic.rad.blob :as blob]\n    [com.fulcrologic.fulcro.dom.events :as evt]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.application :as app]\n    #?(:cljs [com.fulcrologic.fulcro.dom :as dom :refer [div h3 button i span]]\n       :clj  [com.fulcrologic.fulcro.dom-server :as dom :refer [div h3 button i span]])\n    [com.fulcrologic.fulcro.dom.html-entities :as ent]\n    [com.fulcrologic.fulcro.algorithms.form-state :as fs]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid]\n    [com.fulcrologic.fulcro.algorithms.merge :as merge]\n    [taoensso.encore :as enc]\n    [taoensso.timbre :as log]\n    [com.fulcrologic.rad.semantic-ui-options :as suo]))\n\n(defn render-to-many [{::form/keys [form-instance] :as env} {k ::attr/qualified-key :as attr} {::form/keys [subforms] :as options}]\n  (let [{:semantic-ui/keys [add-position]\n         ::form/keys       [ui title can-delete? can-add? added-via-upload?]\n         ::keys            [ref-container-class]} (get subforms k)\n        form-instance-props (comp/props form-instance)\n        read-only?          (form/read-only? form-instance attr)\n        add?                (if read-only? false (?! can-add? form-instance attr))\n        delete?             (fn [item] (and (not read-only?) (?! can-delete? form-instance item)))\n        items               (get form-instance-props k)\n        title               (?! (or title (some-> ui (comp/component-options ::form/title)) \"\") form-instance form-instance-props)\n        invalid?            (validation/invalid-attribute-value? env attr)\n        validation-message  (validation/validation-error-message env attr)\n        add                 (when (or (nil? add?) add?)\n                              (let [order (if (keyword? add?) add? :append)]\n                                (if (?! added-via-upload? env)\n                                  (dom/input {:type     \"file\"\n                                              :onChange (fn [evt]\n                                                          (let [new-id     (tempid/tempid)\n                                                                js-file    (-> evt blob/evt->js-files first)\n                                                                attributes (comp/component-options ui ::form/attributes)\n                                                                id-attr    (comp/component-options ui ::form/id)\n                                                                id-key     (::attr/qualified-key id-attr)\n                                                                {::attr/keys [qualified-key] :as sha-attr} (first (filter ::blob/store\n                                                                                                                    attributes))\n                                                                target     (conj (comp/get-ident form-instance) k)\n                                                                new-entity (fs/add-form-config ui\n                                                                             {id-key        new-id\n                                                                              qualified-key \"\"})]\n                                                            (merge/merge-component! form-instance ui new-entity order target)\n                                                            (blob/upload-file! form-instance sha-attr js-file {:file-ident [id-key new-id]})))})\n                                  (button :.ui.tiny.icon.button\n                                    {:onClick (fn [_]\n                                                (form/add-child! (assoc env\n                                                                   ::form/order order\n                                                                   ::form/parent-relation k\n                                                                   ::form/parent form-instance\n                                                                   ::form/child-class ui)))}\n                                    (i :.plus.icon)))))\n        ui-factory          (comp/computed-factory ui {:keyfn (fn [item] (-> ui (comp/get-ident item) second str))})]\n    (div :.ui.container {:key (str k)}\n      (h3 title (span ent/nbsp ent/nbsp) (when (or (nil? add-position) (= :top add-position)) add))\n      (when invalid?\n        (div :.ui.error.message\n          validation-message))\n      (if (seq items)\n        (div {:className (or (?! ref-container-class env) \"ui segments\")}\n          (mapv\n            (fn [props]\n              (ui-factory props\n                (merge\n                  env\n                  {::form/parent          form-instance\n                   ::form/parent-relation k\n                   ::form/can-delete?     (if delete? (delete? props) false)})))\n            items))\n        (div :.ui.message \"None.\"))\n      (when (= :bottom add-position) add))))\n\n(defn render-to-one [{::form/keys [form-instance] :as env} {k ::attr/qualified-key :as attr} {::form/keys [subforms] :as options}]\n  (let [{::form/keys [ui can-add? can-delete? title ref-container-class]} (get subforms k)\n        form-props         (comp/props form-instance)\n        props              (get form-props k)\n        title              (?! (or title (some-> ui (comp/component-options ::form/title)) \"\") form-instance form-props)\n        ui-factory         (comp/computed-factory ui)\n        invalid?           (validation/invalid-attribute-value? env attr)\n        validation-message (validation/validation-error-message env attr)\n        std-props          {::form/nested?         true\n                            ::form/parent          form-instance\n                            ::form/parent-relation k\n                            ::form/can-delete?     (or\n                                                     (?! can-delete? form-instance form-props)\n                                                     false)}]\n    (cond\n      props\n      (div {:key (str k) :classes [(?! ref-container-class env)]}\n        (h3 :.ui.header title)\n        (when invalid?\n          (div :.ui.error.message validation-message))\n        (ui-factory props (merge env std-props)))\n\n      (or (nil? can-add?) (?! can-add? form-instance attr))\n      (div {:key (str k) :classes [(?! ref-container-class env)]}\n        (h3 :.ui.header title)\n        (button :.ui.primary.button {:onClick (fn [] (form/add-child! (assoc env\n                                                                        ::form/parent-relation k\n                                                                        ::form/parent form-instance\n                                                                        ::form/child-class ui)))} (tr \"Create\"))))))\n\n(defn standard-ref-container [env {::attr/keys [cardinality] :as attr} options]\n  (if (= :many cardinality)\n    (render-to-many env attr options)\n    (render-to-one env attr options)))\n\n(defn render-single-file [{::form/keys [form-instance] :as env} {k ::attr/qualified-key :as attr} {::form/keys [subforms] :as options}]\n  (let [{::form/keys [ui can-delete?]} (get subforms k)\n        parent     (comp/props form-instance)\n        form-props (comp/props form-instance)\n        props      (get form-props k)\n        ui-factory (comp/computed-factory ui)\n        label      (form/field-label env attr)\n        std-props  {::form/nested?         true\n                    ::form/parent          form-instance\n                    ::form/parent-relation k\n                    ::form/can-delete?     (if can-delete?\n                                             (can-delete? parent props)\n                                             false)}]\n    (if props\n      (div :.field {:key (str k)}\n        (dom/label label)\n        (ui-factory props (merge env std-props)))\n      (div {:key (str k)}\n        (div (tr \"Upload??? (TODO)\"))))))\n\n(defsc ManyFiles [this {{::form/keys [form-instance master-form] :as env} :env\n                        {k ::attr/qualified-key :as attr}                 :attribute\n                        {::form/keys [subforms] :as options}              :options}]\n  {:initLocalState (fn [this] {:input-key (str (rand-int 1000000))})}\n  (let [{:semantic-ui/keys [add-position]\n         ::form/keys       [ui title can-delete? can-add? sort-children]} (get subforms k)\n        form-instance-props (comp/props form-instance)\n        read-only?          (or\n                              (form/read-only? master-form attr)\n                              (form/read-only? form-instance attr))\n        add?                (if read-only? false (?! can-add? form-instance attr))\n        delete?             (if read-only? false (fn [item] (?! can-delete? form-instance item)))\n        items               (-> form-instance comp/props k\n                              (cond->\n                                sort-children sort-children))\n        title               (?! (or title (some-> ui (comp/component-options ::form/title)) \"\") form-instance form-instance-props)\n        upload-id           (str k \"-file-upload\")\n        add                 (when (or (nil? add?) add?)\n                              (dom/div\n                                (dom/label :.ui.green.button {:htmlFor upload-id}\n                                  (dom/i :.ui.plus.icon)\n                                  (tr \"Add File\"))\n                                (dom/input {:type     \"file\"\n                                            ;; trick: changing the key on change clears the input, so a failed upload can be retried\n                                            :key      (comp/get-state this :input-key)\n                                            :id       upload-id\n                                            :style    {:zIndex  -1\n                                                       :width   \"1px\"\n                                                       :height  \"1px\"\n                                                       :opacity 0}\n                                            :onChange (fn [evt]\n                                                        (let [new-id     (tempid/tempid)\n                                                              js-file    (-> evt blob/evt->js-files first)\n                                                              attributes (comp/component-options ui ::form/attributes)\n                                                              id-attr    (comp/component-options ui ::form/id)\n                                                              id-key     (::attr/qualified-key id-attr)\n                                                              {::attr/keys [qualified-key] :as sha-attr} (first (filter ::blob/store\n                                                                                                                  attributes))\n                                                              target     (conj (comp/get-ident form-instance) k)\n                                                              new-entity (fs/add-form-config ui\n                                                                           {id-key        new-id\n                                                                            qualified-key \"\"})]\n                                                          (merge/merge-component! form-instance ui new-entity :append target)\n                                                          (blob/upload-file! form-instance sha-attr js-file {:file-ident [id-key new-id]})\n                                                          (comp/set-state! this {:input-key (str (rand-int 1000000))})))})))\n        ui-factory          (comp/computed-factory ui {:keyfn (fn [item] (-> ui (comp/get-ident item) second str))})]\n    (div :.ui.basic.segment {:key (str k)}\n      (dom/h2 :.ui.header title)\n      (when (or (nil? add-position) (= :top add-position)) add)\n      (if (seq items)\n        (div :.ui.very.relaxed.items\n          (mapv\n            (fn [props]\n              (ui-factory props\n                (merge\n                  env\n                  {::form/parent          form-instance\n                   ::form/parent-relation k\n                   ::form/can-delete?     (if delete? (?! delete? props) false)})))\n            items))\n        (div :.ui.message\n          (trc \"there are no files in a list of uploads\" \"No files.\")))\n\n      (when (= :bottom add-position) add))))\n\n(def ui-many-files (comp/factory ManyFiles {:keyfn (fn [{:keys [attribute]}] (::attr/qualified-key attribute))}))\n\n(defn file-ref-container\n  [env {::attr/keys [cardinality] :as attr} options]\n  (if (= :many cardinality)\n    (ui-many-files {:env env :attribute attr :options options})\n    (render-single-file env attr options)))\n\n(defn render-attribute [env attr {::form/keys [subforms] :as options}]\n  (let [{k ::attr/qualified-key} attr]\n    (if (contains? subforms k)\n      (let [render-ref (or (form/ref-container-renderer env attr) standard-ref-container)]\n        (render-ref env attr options))\n      (form/render-field env attr))))\n\n(def n-fields-string {1 \"one field\"\n                      2 \"two fields\"\n                      3 \"three fields\"\n                      4 \"four fields\"\n                      5 \"five fields\"\n                      6 \"six fields\"\n                      7 \"seven fields\"})\n\n(def attribute-map (memoize\n                     (fn [attributes]\n                       (reduce\n                         (fn [m {::attr/keys [qualified-key] :as attr}]\n                           (assoc m qualified-key attr))\n                         {}\n                         attributes))))\n\n(defn- render-layout* [env options k->attribute layout]\n  (when #?(:clj true :cljs goog.DEBUG)\n    (when-not (and (vector? layout) (every? vector? layout))\n      (log/error \"::form/layout must be a vector of vectors!\")))\n  (try\n    (into []\n      (map-indexed\n        (fn [idx row]\n          (div {:key idx :className (n-fields-string (count row))}\n            (mapv (fn [col]\n                    (enc/if-let [_    k->attribute\n                                 attr (k->attribute col)]\n                      (render-attribute env attr options)\n                      (if (some-> options ::control/controls (get col))\n                        (control/render-control (::form/form-instance env) col)\n                        (log/error \"Missing attribute (or lookup) for\" col))))\n              row)))\n        layout))\n    (catch #?(:clj Exception :cljs :default) _)))\n\n(defn render-layout [env {::form/keys [attributes layout] :as options}]\n  (let [k->attribute (attribute-map attributes)]\n    (render-layout* env options k->attribute layout)))\n\n(defsc TabbedLayout [this env {::form/keys [attributes tabbed-layout] :as options}]\n  {:initLocalState (fn [this]\n                     (try\n                       {:current-tab 0\n                        :tab-details (memoize\n                                       (fn [attributes tabbed-layout]\n                                         (let [k->attr           (attribute-map attributes)\n                                               tab-labels        (filterv string? tabbed-layout)\n                                               tab-label->layout (into {}\n                                                                   (map vec)\n                                                                   (partition 2 (mapv first (partition-by string? tabbed-layout))))]\n                                           {:k->attr           k->attr\n                                            :tab-labels        tab-labels\n                                            :tab-label->layout tab-label->layout})))}\n                       (catch #?(:clj Exception :cljs :default) _\n                         (log/error \"Cannot build tabs for tabbed layout. Check your tabbed-layout options for\" (comp/component-name this)))))}\n  (let [{:keys [tab-details current-tab]} (comp/get-state this)\n        {:keys [k->attr tab-labels tab-label->layout]} (tab-details attributes tabbed-layout)\n        active-layout (some->> current-tab\n                        (get tab-labels)\n                        (get tab-label->layout))]\n    (div {:key (str current-tab)}\n      (div :.ui.pointing.menu {}\n        (map-indexed\n          (fn [idx title]\n            (dom/a :.item\n              {:key     (str idx)\n               :onClick #(comp/set-state! this {:current-tab idx})\n               :classes [(when (= current-tab idx) \"active\")]}\n              title)) tab-labels))\n      (div :.ui.segment\n        (render-layout* env options k->attr active-layout)))))\n\n(def ui-tabbed-layout (comp/computed-factory TabbedLayout))\n\n(declare standard-form-layout-renderer)\n\n(defsc StandardFormContainer [this {::form/keys [props computed-props form-instance master-form] :as env}]\n  {:shouldComponentUpdate (fn [_ _ _] true)}\n  (let [{::form/keys [can-delete?]} computed-props\n        nested?         (not= master-form form-instance)\n        read-only-form? (or\n                          (?! (comp/component-options form-instance ::form/read-only?) form-instance)\n                          (?! (comp/component-options master-form ::form/read-only?) master-form))\n\n        invalid?        (if read-only-form? false (form/invalid? env))\n        render-fields   (or (form/form-layout-renderer env) standard-form-layout-renderer)]\n    (when #?(:cljs goog.DEBUG :clj true)\n      (let [valid? (if read-only-form? true (form/valid? env))\n            dirty? (if read-only-form? false (or (:ui/new? props) (fs/dirty? props)))]\n        (log/debug \"Form \" (comp/component-name form-instance) \" valid? \" valid?)\n        (log/debug \"Form \" (comp/component-name form-instance) \" dirty? \" dirty?)))\n    (if nested?\n      (div {:className (or (?! (comp/component-options form-instance ::ref-element-class) env) \"ui segment\")}\n        (div :.ui.form {:classes [(when invalid? \"error\")]\n                        :key     (str (comp/get-ident form-instance))}\n          (when can-delete?\n            (button :.ui.icon.primary.right.floated.button {:disabled (not can-delete?)\n                                                            :onClick  (fn []\n                                                                        (form/delete-child! env))}\n              (i :.times.icon)))\n          (render-fields env)))\n      (let [{::form/keys [title action-buttons controls]} (comp/component-options form-instance)\n            title          (?! title form-instance props)\n            action-buttons (if action-buttons action-buttons form/standard-action-buttons)]\n        (div {:key       (str (comp/get-ident form-instance))\n              :className (or\n                           (?! (suo/get-rendering-options form-instance suo/layout-class) env)\n                           (?! (comp/component-options form-instance ::top-level-class) env)\n                           \"ui container\")}\n          (div {:className (or\n                             (?! (suo/get-rendering-options form-instance suo/controls-class) env)\n                             (?! (comp/component-options form-instance ::controls-class) env)\n                             \"ui top attached segment\")}\n            (dom/h3 :.ui.header\n              title\n              (div :.ui.right.floated.buttons\n                (keep #(control/render-control master-form %) action-buttons))))\n          (div {:classes [(or (?! (comp/component-options form-instance ::form-class) env) \"ui attached form\")\n                          (when invalid? \"error\")]}\n            (div :.ui.error.message (tr \"The form has errors and cannot be saved.\"))\n            (div :.ui.attached.segment\n              (render-fields env))))))))\n\n(def standard-form-container (comp/factory StandardFormContainer))\n\n(defn standard-form-layout-renderer [{::form/keys [form-instance] :as env}]\n  (let [{::form/keys [attributes layout tabbed-layout] :as options} (comp/component-options form-instance)]\n    (cond\n      (vector? layout) (render-layout env options)\n      (vector? tabbed-layout) (ui-tabbed-layout env options)\n      :else (mapv (fn [attr] (render-attribute env attr options)) attributes))))\n\n(defn- file-icon-renderer* [{::form/keys [form-instance] :as env}]\n  (let [{::form/keys [attributes] :as options} (comp/component-options form-instance)\n        attribute (first (filter ::blob/store attributes))\n        sha-key   (::attr/qualified-key attribute)\n        file-key  (blob/filename-key sha-key)\n        url-key   (blob/url-key sha-key)\n        props     (comp/props form-instance)\n        filename  (get props file-key \"File\")\n        dirty?    (fs/dirty? props sha-key)\n        failed?   (blob/failed-upload? props sha-key)\n        invalid?  (validation/invalid-attribute-value? env attribute)\n        pct       (blob/upload-percentage props sha-key)\n        sha       (get props sha-key)\n        url       (get props url-key)]\n    (if (blob/uploading? props sha-key)\n      (dom/span :.item {:key (str sha)}\n        (dom/div :.ui.tiny.image\n          (dom/i :.huge.file.icon)\n          (dom/div :.ui.active.red.loader {:style {:marginLeft \"-10px\"}})\n          (dom/div :.ui.bottom.attached.blue.progress {:data-percent pct}\n            (div :.bar {:style {:transitionDuration \"300ms\"\n                                :width              pct}}\n              (div :.progress \"\"))))\n        (div :.middle.aligned.content\n          filename)\n        (dom/button :.ui.red.icon.button {:onClick (fn []\n                                                     (app/abort! form-instance sha)\n                                                     (form/delete-child! env))}\n          (dom/i :.times.icon)))\n      ((if dirty? dom/span dom/a) :.item\n       {:target  \"_blank\"\n        :key     (str sha)\n        :href    (str url \"?filename=\" filename)\n        :onClick (fn [evt]\n                   #?(:cljs (when-not (or (not (blob/blob-downloadable? props sha-key))\n                                        (js/confirm (tr \"View/download?\")))\n                              (evt/stop-propagation! evt)\n                              (evt/prevent-default! evt))))}\n       (dom/div :.ui.tiny.image\n         (if failed?\n           (dom/i :.huge.skull.crossbones.icon)\n           (dom/i :.huge.file.icon)))\n       (div :.middle.aligned.content\n         (str filename (cond failed? (str \" (\" (tr \"Upload failed. Delete and try again.\") \")\")\n                             dirty? (str \" (\" (tr \"unsaved\") \")\"))))\n       (dom/button :.ui.red.icon.button {:onClick (fn [evt]\n                                                    (evt/stop-propagation! evt)\n                                                    (evt/prevent-default! evt)\n                                                    (when #?(:clj true :cljs (js/confirm (tr \"Permanently Delete File?\")))\n                                                      (form/delete-child! env)))}\n         (dom/i :.times.icon))))))\n\n(defn file-icon-renderer [env] (file-icon-renderer* env))\n"]}