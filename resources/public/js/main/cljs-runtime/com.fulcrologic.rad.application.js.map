{"version":3,"sources":["com/fulcrologic/rad/application.cljc"],"mappings":"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","names":["p__71778","map__71779","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","com.fulcrologic.rad.application/secured-request-middleware","csrf-token","com.fulcrologic.fulcro.networking.http_remote.wrap_fulcro_request","com.fulcrologic.fulcro.networking.file_upload.wrap_file_upload","G__71781","com.fulcrologic.fulcro.networking.http_remote.wrap_csrf_token","com.fulcrologic.rad.application/default-network-blacklist","com.fulcrologic.fulcro.data-fetch/marker-table","com.fulcrologic.rad.application/elision-predicate","blacklist","k","kw-namespace","cljs.core/Keyword","cljs.core/namespace","cljs.core/vector?","cljs.core/first","ns","G__71782","cljs.core/contains?","cljs.core._EQ_","com.fulcrologic.rad.application/elide-params","params","pred","clojure.walk/postwalk","x","cljs.core/count","G__71785","p__71787","map__71788","com.fulcrologic.rad.application/elide-ast-nodes","key","union-key","children","ast","elision-predicate","union-elision?","and__4115__auto__","or__4126__auto__","taoensso.timbre._log_BANG_","taoensso.timbre/*config*","cljs.core/Delay","cljs.core.pr_str","new-ast","cljs.core.update","c","cljs.core/vec","p1__71786#","cljs.core.keep","cljs.core/seq","cljs.core.dissoc","com.fulcrologic.rad.application/global-eql-transform","mutation?","cljs.core/Symbol","has-children?","G__71790","cljs.core/not","cljs.core/conj","edn-query-language.core/expr->ast","p__71791","map__71792","com.fulcrologic.rad.application/default-remote-error?","body","result","com.fulcrologic.fulcro.application/default-remote-error?","cljs.core.get_in","p__71794","map__71795","com.fulcrologic.rad.application/fulcro-rad-app","remote-error?","options","com.fulcrologic.fulcro.application.fulcro_app","cljs.core.merge","token","js/fulcro_network_csrf_token","com.fulcrologic.fulcro.networking.http-remote/fulcro-http-remote","com.fulcrologic.fulcro.rendering.multiple-roots-renderer/render!","com.fulcrologic.rad.options_util._QMARK__BANG_","com.fulcrologic.rad.application/install-ui-controls!","app","controls","map__71797","runtime-atom","cljs.core.swap_BANG_","cljs.core/assoc"],"sourcesContent":["(ns com.fulcrologic.rad.application\n  (:require\n    [com.fulcrologic.fulcro.rendering.multiple-roots-renderer :as mroot]\n    [com.fulcrologic.fulcro.algorithms.form-state :as fs]\n    [com.fulcrologic.rad.options-util :refer [?!]]\n    [com.fulcrologic.fulcro.application :as app]\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    #?@(:cljs\n        [[com.fulcrologic.fulcro.networking.http-remote :as net]\n         [com.fulcrologic.fulcro.networking.file-upload :as file-upload]])\n    [com.fulcrologic.fulcro.ui-state-machines :as uism]\n    [edn-query-language.core :as eql]\n    [taoensso.timbre :as log]\n    [clojure.walk :as walk]))\n\n#?(:cljs\n   (defn secured-request-middleware [{:keys [csrf-token]}]\n     (->\n       (net/wrap-fulcro-request)\n       (file-upload/wrap-file-upload)\n       (cond->\n         csrf-token (net/wrap-csrf-token csrf-token)))))\n\n(def default-network-blacklist\n  \"A set of the keywords that should not appear on network requests.\"\n  #{::uism/asm-id\n    ::app/active-remotes\n    :com.fulcrologic.rad.blob/blobs\n    :com.fulcrologic.rad.picker-options/options-cache\n    df/marker-table\n    ::fs/config})\n\n(defn elision-predicate\n  \"Returns an elision predicate that will return true if the keyword k is in the blacklist or has the namespace\n  `ui`.\"\n  [blacklist]\n  (fn [k]\n    (let [kw-namespace (fn [k] (and (keyword? k) (namespace k)))\n          k            (if (vector? k) (first k) k)\n          ns           (some-> k kw-namespace)]\n      (or\n        (contains? blacklist k)\n        (and (string? ns) (= \"ui\" ns))))))\n\n(defn elide-params\n  \"Given a params map, elides any k-v pairs where `(pred k)` is false.\"\n  [params pred]\n  (walk/postwalk (fn [x]\n                   (if (and (vector? x) (= 2 (count x)) (pred (first x)))\n                     nil\n                     x))\n    params))\n\n(defn elide-ast-nodes\n  \"Like df/elide-ast-nodes but also applies elision-predicate logic to mutation params.\"\n  [{:keys [key union-key children] :as ast} elision-predicate]\n  (let [union-elision? (and union-key (elision-predicate union-key))]\n    (when-not (or union-elision? (elision-predicate key))\n      (when (and union-elision? (<= (count children) 2))\n        (log/warn \"Unions are not designed to be used with fewer than two children. Check your calls to Fulcro\n        load functions where the :without set contains \" (pr-str union-key)))\n      (let [new-ast (-> ast\n                      (update :children (fn [c] (vec (keep #(elide-ast-nodes % elision-predicate) c))))\n                      (update :params elide-params elision-predicate))]\n        (if (seq (:children new-ast))\n          new-ast\n          (dissoc new-ast :children))))))\n\n(defn global-eql-transform\n  \"Returns an EQL transform that removes `(pred k)` keywords from network requests.\"\n  [pred]\n  (fn [ast]\n    (let [mutation?     (symbol? (:dispatch-key ast))\n          has-children? (seq (:children ast))]\n      (cond-> (elide-ast-nodes ast pred)\n        (and mutation? (not has-children?)) (update :children conj (eql/expr->ast '*))\n        mutation? (update :children conj (eql/expr->ast :tempids))))))\n\n(defn default-remote-error?\n  \"Remote error detection for RAD that adds in support for form errors.\"\n  [{:keys [body] :as result}]\n  (or\n    (app/default-remote-error? result)\n    (seq (get-in body ['com.fulcrologic.rad.form/save-form\n                       :com.fulcrologic.rad.form/errors]))))\n\n(defn fulcro-rad-app\n  \"Create a new fulcro RAD application with reasonable defaults.\n\n  `options` is the same as for `app/fulcro-app`. You should use caution when overridding the :optimized-render!\n   or `:global-eql-transform` options.\"\n  [{:keys [remote-error?] :as options}]\n  (app/fulcro-app\n    (merge\n      #?(:clj {}\n         :cljs\n         (let [token (when (exists? js/fulcro_network_csrf_token)\n                       js/fulcro_network_csrf_token)]\n           {:remotes {:remote (net/fulcro-http-remote {:url                \"/api\"\n                                                       :request-middleware (secured-request-middleware {:csrf-token token})})}}))\n      {:global-eql-transform (global-eql-transform (elision-predicate default-network-blacklist))\n       :optimized-render!    mroot/render!}\n      options\n      {:remote-error? (fn [result]\n                        (or\n                          (true? (?! remote-error? result))\n                          (default-remote-error? result)))})))\n\n(defn install-ui-controls!\n  \"Install the given control set as the RAD UI controls used for rendering forms. This should be called before mounting\n  your app. The `controls` is just a map from data type to a sub-map that contains a :default key, with optional\n  alternate renderings for that data type that can be selected with `::form/field-style {attr-key style-key}`.\"\n  [app controls]\n  (let [{::app/keys [runtime-atom]} app]\n    (swap! runtime-atom assoc :com.fulcrologic.rad/controls controls)))\n"]}