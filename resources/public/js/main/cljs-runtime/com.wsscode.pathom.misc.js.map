{"version":3,"sources":["com/wsscode/pathom/misc.cljc"],"mappings":"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","names":["js/goog.define","com.wsscode.pathom.misc/INCLUDE_SPECS","com.wsscode.pathom.misc/pathom-random-uuid","cljs.core/random-uuid","var_args","G__80973","com.wsscode.pathom.misc/distinct-by","js/Error","f","rf","seen","cljs.core/volatile!","result","x","fx","cljs.core/deref","cljs.core/contains?","cljs.core.conj","coll","step","xs","cljs.core/LazySeq","p__80974","vec__80975","cljs.core.nth","temp__5735__auto__","s","cljs.core/seq","cljs.core/rest","cljs.core/cons","G__80979","com.wsscode.pathom.misc/dedupe-by","pv","prior","cljs.core/vreset!","cljs.core._EQ_","cljs.core.sequence","com.wsscode.pathom.misc.dedupe_by","com.wsscode.pathom.misc/index-by","cljs.core.reduce","m","cljs.core.assoc","com.wsscode.pathom.misc/sconj","cljs.core.fnil","cljs.core/conj","com.wsscode.pathom.misc/vconj","G__80981","com.wsscode.pathom.misc/queue","cljs.core/PersistentQueue","com.wsscode.pathom.misc.queue","com.wsscode.pathom.misc/map-keys","cljs.core.into","iter__4529__auto__","s__80983","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__80985","cljs.core/chunk-buffer","i__80984","vec__80995","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__80982","cljs.core/chunk-rest","vec__81002","cljs.core/first","k","v","com.wsscode.pathom.misc/map-vals","s__81008","b__81010","i__81009","vec__81011","iter__81007","vec__81014","cljs.core/chunk-first"],"sourcesContent":["(ns com.wsscode.pathom.misc\n  #?(:clj\n     (:import\n       (java.util\n         UUID))))\n\n#?(:clj  (def INCLUDE_SPECS true)\n   :cljs (goog-define INCLUDE_SPECS true))\n\n(defn pathom-random-uuid []\n  #?(:clj  (UUID/randomUUID)\n     :cljs (random-uuid)))\n\n(defn distinct-by\n  \"Returns a lazy sequence of the elements of coll, removing any elements that\n  return duplicate values when passed to a function f.\"\n  ([f]\n   (fn [rf]\n     (let [seen (volatile! #{})]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result x]\n          (let [fx (f x)]\n            (if (contains? @seen fx)\n              result\n              (do (vswap! seen conj fx)\n                  (rf result x)))))))))\n  ([f coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                  ((fn [[x :as xs] seen]\n                     (when-let [s (seq xs)]\n                       (let [fx (f x)]\n                         (if (contains? seen fx)\n                           (recur (rest s) seen)\n                           (cons x (step (rest s) (conj seen fx)))))))\n                   xs seen)))]\n     (step coll #{}))))\n\n(defn dedupe-by\n  \"Returns a lazy sequence removing consecutive duplicates in coll when passed to a function f.\n  Returns a transducer when no collection is provided.\"\n  {:added \"1.7\"}\n  ([f]\n   (fn [rf]\n     (let [pv (volatile! ::none)]\n       (fn\n         ([] (rf))\n         ([result] (rf result))\n         ([result x]\n          (let [prior @pv\n                fx    (f x)]\n            (vreset! pv fx)\n            (if (= prior fx)\n              result\n              (rf result x))))))))\n  ([f coll] (sequence (dedupe-by f) coll)))\n\n(defn index-by\n  \"Like group by, but will keep only the last result.\"\n  [f coll]\n  (reduce\n    (fn [m x]\n      (assoc m (f x) x))\n    {}\n    coll))\n\n(def sconj (fnil conj #{}))\n(def vconj (fnil conj []))\n\n(defn queue\n  \"Create a queue.\"\n  ([] #?(:clj  clojure.lang.PersistentQueue/EMPTY\n         :cljs cljs.core/PersistentQueue.EMPTY))\n  ([coll]\n   (reduce conj (queue) coll)))\n\n(defn map-keys\n  \"Map over the given hash-map keys.\n\n  Example:\n    (map-keys #(str/replace (name %) \\\"_\\\" \\\"-\\\") {\\\"foo_bar\\\" 1}) => {\\\"foo-bar\\\" 1}\n  \"\n  [f m]\n  (into {} (for [[k v] m] [(f k) v])))\n\n(defn map-vals\n  \"Map over the given hash-map vals.\n\n  Example:\n    (map-vals inc {:a 1 :b 2})\n  \"\n  [f m]\n  (into {} (for [[k v] m] [k (f v)])))\n"]}