{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/controls/instant_inputs.cljc"],"mappings":"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","names":["p__89189","p__89190","map__89191","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__89192","com.fulcrologic.rad.rendering.semantic-ui.controls.instant-inputs/ui-date-instant-input","default-local-time","value","onChange","local-time","props","com.fulcrologic.rad.type_support.date_time.inst__GT_html_date","or__4126__auto__","com.fulcrologic.rad.type-support.date-time/now","com.fulcrologic.fulcro.dom.macro_create_element","cljs.core.merge","evt","date-string","com.fulcrologic.fulcro.dom.events/target-value","instant","com.fulcrologic.rad.type-support.date-time/html-date->inst","p__89195","map__89196","com.fulcrologic.rad.rendering.semantic-ui.controls.instant-inputs/ui-ending-date-instant-input","_","today","com.fulcrologic.rad.type_support.date_time.inst__GT_local_datetime","display-date","cljc.java-time.local-date-time/to-local-date","cljc.java-time.local-date-time/minus-days","com.fulcrologic.rad.type-support.date-time/local-date->html-date-string","tomorrow","cljc.java_time.local_date.at_time","cljc.java-time.local-date/plus-days","com.fulcrologic.rad.type-support.date-time/html-date-string->local-date","cljc.java-time.local-time/midnight","com.fulcrologic.rad.type_support.date_time.local_datetime__GT_inst","p__89198","map__89199","com.fulcrologic.rad.rendering.semantic-ui.controls.instant-inputs/ui-date-time-instant-input","disabled?","com.fulcrologic.rad.type_support.date_time.inst__GT_html_datetime_string","G__89201","date-time-string","com.fulcrologic.rad.type_support.date_time.html_datetime_string__GT_inst","cljs.core.assoc","com.fulcrologic.rad.rendering.semantic-ui.controls.instant-inputs/date-time-control","render-env","G__89202","com.fulcrologic.rad.rendering.semantic-ui.controls.control/ui-control","com.fulcrologic.rad.rendering.semantic-ui.controls.instant-inputs/midnight-on-date-control","G__89203","com.fulcrologic.rad.rendering.semantic-ui.controls.instant-inputs/midnight-next-date-control","G__89204","com.fulcrologic.rad.rendering.semantic-ui.controls.instant-inputs/date-at-noon-control","G__89205","cljc.java-time.local-time/noon"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.controls.instant-inputs\n  (:require\n    [com.fulcrologic.guardrails.core :refer [>defn => ?]]\n    [com.fulcrologic.rad.type-support.date-time :as dt]\n    [com.fulcrologic.rad.rendering.semantic-ui.controls.control :as control]\n    [cljc.java-time.local-time :as lt]\n    [com.fulcrologic.fulcro.dom.events :as evt]\n    #?(:clj  [com.fulcrologic.fulcro.dom-server :as dom]\n       :cljs [com.fulcrologic.fulcro.dom :as dom])\n    [cljc.java-time.local-date-time :as ldt]\n    [cljc.java-time.local-date :as ld]))\n\n(defn ui-date-instant-input [{::keys [default-local-time]} {:keys [value onChange local-time] :as props}]\n  (let [value      (dt/inst->html-date (or value (dt/now)))\n        local-time (or local-time default-local-time)]\n    (dom/input\n      (merge props\n        {:value    value\n         :type     \"date\"\n         :onChange (fn [evt]\n                     (when onChange\n                       (let [date-string (evt/target-value evt)\n                             instant     (dt/html-date->inst date-string local-time)]\n                         (onChange instant))))}))))\n\n(defn ui-ending-date-instant-input\n  \"Display the date the user selects, but control a value that is midnight on the next date. Used for generating ending\n  instants that can be used for a proper non-inclusive end date.\"\n  [_ {:keys [value onChange] :as props}]\n  (let [today        (dt/inst->local-datetime (or value (dt/now)))\n        display-date (ldt/to-local-date (ldt/minus-days today 1))\n        value        (dt/local-date->html-date-string display-date)]\n    (dom/input\n      (merge props\n        {:value    value\n         :type     \"date\"\n         :onChange (fn [evt]\n                     (when onChange\n                       (let [date-string (evt/target-value evt)\n                             tomorrow    (ld/at-time (ld/plus-days (dt/html-date-string->local-date date-string) 1)\n                                           lt/midnight)\n                             instant     (dt/local-datetime->inst tomorrow)]\n                         (onChange instant))))}))))\n\n(defn ui-date-time-instant-input [_ {:keys [disabled? value onChange] :as props}]\n  (let [value (dt/inst->html-datetime-string (or value (dt/now)))]\n    (dom/input\n      (merge props\n        (cond->\n          {:value    value\n           :type     \"date\"\n           :onChange (fn [evt]\n                       (when onChange\n                         (let [date-time-string (evt/target-value evt)\n                               instant          (dt/html-datetime-string->inst date-time-string)]\n                           (onChange instant))))}\n          disabled? (assoc :readOnly true))))))\n\n(defn date-time-control [render-env]\n  (control/ui-control (assoc render-env :input-factory ui-date-time-instant-input)))\n\n(defn midnight-on-date-control [render-env]\n  (control/ui-control (assoc render-env\n                        :input-factory ui-date-instant-input\n                        ::default-local-time lt/midnight)))\n\n(defn midnight-next-date-control [render-env]\n  (control/ui-control (assoc render-env\n                        :input-factory ui-ending-date-instant-input)))\n\n(defn date-at-noon-control [render-env]\n  (control/ui-control (assoc render-env\n                        ::default-local-time lt/noon\n                        :input-factory ui-date-instant-input)))\n\n"]}