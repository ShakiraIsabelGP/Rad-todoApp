{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/container.cljc"],"mappings":"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","names":["options__56259__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__88956","com.fulcrologic.fulcro.components/props","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.container","js/com.fulcrologic.rad.rendering.semantic-ui.container.StandardContainerControls","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.container/StandardContainerControls","_","instance","map__88958","controls","com.fulcrologic.rad.control.component_controls","input-layout","action-layout","com.fulcrologic.rad.control/standard-control-layout","com.fulcrologic.fulcro.dom.macro_create_element","or__4126__auto__","G__88961","com.fulcrologic.fulcro.components/component-options","com.fulcrologic.rad.options_util._QMARK__BANG_","cljs.core.keep","k","com.fulcrologic.rad.control.render_control","cljs.core.map_indexed","idx","row","G__88962","com.fulcrologic.rad.rendering.semantic-ui.form/n-fields-string","cljs.core/count","p1__88955#","cljs.core.map","temp__5733__auto__","c","ui-standard-container-controls","com.fulcrologic.fulcro.components.factory","com.fulcrologic.rad.rendering.semantic-ui.container/render-standard-controls","G__88963","com.fulcrologic.rad.rendering.semantic-ui.container/n-string","com.fulcrologic.rad.rendering.semantic-ui.container/render-container-layout","container-instance","map__88964","children","layout","container-props","render-cls","id","cls","factory","com.fulcrologic.fulcro.components.computed_factory","props","G__88966","G__88967","cols","entry","cljs.core/Keyword","width","cljs.core/map?","p__88968","vec__88969","cljs.core.nth","com.fulcrologic.rad.container/id-child-pairs"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.container\n  (:require\n    #?@(:cljs\n        [[com.fulcrologic.fulcro.dom :as dom :refer [div]]]\n        :clj\n        [[com.fulcrologic.fulcro.dom-server :as dom :refer [div]]])\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.rad.container :as container]\n    [com.fulcrologic.rad.control :as control]\n    [com.fulcrologic.rad.options-util :refer [?!]]\n    [com.fulcrologic.rad.rendering.semantic-ui.form :as sui-form]\n    [taoensso.timbre :as log]))\n\n(comp/defsc StandardContainerControls [_ {:keys [instance]}]\n  {:shouldComponentUpdate (fn [_ _ _] true)}\n  (let [controls (control/component-controls instance)\n        {:keys [input-layout action-layout]} (control/standard-control-layout instance)]\n    (div :.ui.top.attached.compact.basic.segment\n      (dom/h3 :.ui.header\n        (or (some-> instance comp/component-options ::container/title (?! instance)) \"\")\n        (div :.ui.right.floated.buttons\n          (keep (fn [k] (control/render-control instance k (get controls k))) action-layout)))\n      (div :.ui.form\n        (map-indexed\n          (fn [idx row]\n            (div {:key idx :className (sui-form/n-fields-string (count row))}\n              (map #(if-let [c (get controls %)]\n                      (control/render-control instance % c)\n                      (dom/div :.ui.field {:key (str %)} \"\")) row)))\n          input-layout)))))\n\n(let [ui-standard-container-controls (comp/factory StandardContainerControls)]\n  (defn render-standard-controls [instance]\n    (ui-standard-container-controls {:instance instance})))\n\n(def n-string {0  \"zero\"\n               1  \"one\"\n               2  \"two\"\n               3  \"three\"\n               4  \"four\"\n               5  \"five\"\n               6  \"six\"\n               7  \"seven\"\n               8  \"eight\"\n               9  \"nine\"\n               10 \"ten\"\n               11 \"eleven\"\n               12 \"twelve\"\n               13 \"thirteen\"\n               14 \"fourteen\"\n               15 \"fifteen\"\n               16 \"sixteen\"})\n\n(defn render-container-layout [container-instance]\n  (let [{::container/keys [children layout]} (comp/component-options container-instance)]\n    ;; TODO: Custom controls rendering as a separate config?\n    (let [container-props (comp/props container-instance)\n          render-cls      (fn [id cls]\n                            (let [factory (comp/computed-factory cls)\n                                  props   (get container-props id {})]\n                              (factory props {::container/controlled? true})))]\n      (dom/div :.ui.basic.segments\n        (render-standard-controls container-instance)\n        (dom/div :.ui.basic.segment\n          (if layout\n            (dom/div :.ui.container.centered.grid\n              (map-indexed\n                (fn *render-row [idx row]\n                  (let [cols (count row)]\n                    (dom/div :.row {:key idx}\n                      (map\n                        (fn *render-col [entry]\n                          (let [id    (if (keyword? entry) entry (:id entry))\n                                width (or\n                                        (and (map? entry) (:width entry))\n                                        (int (/ 16 cols)))\n                                cls   (get children id)]\n                            (dom/div {:key id :classes [(when width (str (n-string width) \" wide\")) \"column\"]}\n                              (render-cls id cls))))\n                        row))))\n                layout))\n            (map\n              (fn [[id cls]]\n                (dom/div {:key id}\n                  (render-cls id cls))) (container/id-child-pairs children))))))))\n"]}