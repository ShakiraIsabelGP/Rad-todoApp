{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/field.cljc"],"mappings":";AAcA,AAAA;;;AAAA,AAAAA,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAEFE;AAFJ,AAGG,AAAA,AAACC,AAAwBD;;;AAH5B,AAAA,AAAA,AAAMF,AAIFI,AAAWF;AAJf,AAKG,AAAAG,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAsCO;AAAtC,AAAAH,AAAAJ,AAAA,AAAmBM;AAAnBD,AAAAN;AAAAM,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAJ,AAAA,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAAC,AAAAE,AAAAA;AAAAA,AAAiFK;AAAjF,AAAAN,AAAAC,AAAA,AAAyDG;AAAzD,AAAAJ,AAAAC,AAAA,AAA8DI;AAA9D,AACE,AAAME,AAAmB,AAACC,AAAAA,AAAAA,AAAWN,AAAAA;AAC/BO,AAAmB,AAAAC,AAAI,AAACC,AAAoBR,AAAIG;AAA7B,AAAA,AAAAI;AAAAA;;AACE,AAAAE,AAAKN;AAAL,AAAA,AAAAM;AAAe,AAACZ,AAAIO,AAAMF;;AAA1BO;;;;AACrBnB,AAAmB,AAACoB,AAAM,AAACC,AAAG,AAAA,AAACC,AAAwBZ,AAAIG,AAAwBH,AAAKV;AACxFuB,AAAmB,AAACC,AAAAA,AAAAA,AAAoCd,AAAAA,AAAIG,AAAAA;AAC5DY,AAAmB,AAAA,AAAA,AAAMF,AAAS,AAACG,AAAAA,AAAAA,AAAoChB,AAAAA,AAAIG,AAAAA;AAC3Ec,AAAmB,AAACC,AAAiBlB,AAAIG;AACzCgB,AAAmB,AAACC,AAAoBrB,AAAcI;AACtDkB,AAAmB,AAACC,AAAgBvB,AAAcI;AAClDb,AAAmB,AAAI+B,AAAW,AAAA,AAAA,AAACE,AAAMjC,AAAiCA;AAThF,AAUE,AAAM6B;AAAN,AACE,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA0B,AAAKtB,AACJ,AAAA,AAAA,AAAA,AAAMW,AAC/B,AAAAW,AAAA,AAAA,AACE,AAAAjB,AAAIU;AAAJ,AAAA,AAAAV;AAAAA;;AAAgB,AAAAkB,AAAQvB;AAARuB,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAAA,AAAsBC;AAAtB,AAAA,AAAA,AAAAD,AAAA;AAAA;;AAAA,AAAAA,AAA2BE;;;AAD7C,AAEE,AAAA,AAAA,AAAMZ,AAAmB,AAAA,AAAA,AAAKa,AAAab,AAC7C,AAAAS,AAAA,AAAA,AACE,AAAAK,AAAe,AAACnB,AAAMpB,AACL,AAAAwC,AAAA,AAAA,AAAA,AACaxB,AACA,AAAKyB;AAAL,AAAQ,AAACC,AAAiBhC,AAAIE,AAAc6B;AAFzD,AAGa,AAAKA;AAAL,AAAQ,AAACE,AAAoBjC,AAAIE,AAAc6B;;AAH5D,AAAA,AAIEV;AAAW,AAAAS,AAAA,AAAA,AAACP;;AAJdO;;;AADjB,AAAA,AAAAD,AAAAA,AAACzC,AAAAA,AAAAA;AANL,AAKE;;AANJ;;;;;AAhBP,AAAA,AAAA,AAAMF;;AAAN","names":["var_args","G__62781","com.fulcrologic.rad.rendering.semantic-ui.field/render-field-factory","js/Error","input-factory","com.fulcrologic.rad.rendering.semantic_ui.field.render_field_factory","addl-props","p__62782","p__62783","map__62784","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__62785","form-instance","env","type","qualified-key","attribute","props","com.fulcrologic.fulcro.components/props","value","or__4126__auto__","com.fulcrologic.rad.form/computed-value","and__4115__auto__","cljs.core.merge","com.fulcrologic.rad.options_util._QMARK__BANG_","com.fulcrologic.rad.form/field-style-config","invalid?","com.fulcrologic.rad.ui-validation/invalid-attribute-value?","validation-message","com.fulcrologic.rad.ui-validation/validation-error-message","field-label","com.fulcrologic.rad.form/field-label","visible?","com.fulcrologic.rad.form/field-visible?","read-only?","com.fulcrologic.rad.form/read-only?","cljs.core.assoc","com.fulcrologic.fulcro.dom.macro_create_element","G__62788","cljs.core/name","clojure.string/capitalize","com.fulcrologic.fulcro.dom.html-entities/nbsp","G__62789","G__62790","v","com.fulcrologic.rad.form/input-blur!","com.fulcrologic.rad.form/input-changed!"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.field\n  (:require\n    [clojure.string :as str]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.guardrails.core :refer [>defn =>]]\n    #?(:cljs [com.fulcrologic.fulcro.dom :refer [div label input span]]\n       :clj  [com.fulcrologic.fulcro.dom-server :refer [div label input span]])\n    [com.fulcrologic.rad.attributes :as attr]\n    [com.fulcrologic.fulcro.dom.html-entities :as ent]\n    [com.fulcrologic.rad.options-util :refer [?!]]\n    [com.fulcrologic.rad.form :as form]\n    [com.fulcrologic.rad.ui-validation :as validation]\n    [taoensso.timbre :as log]))\n\n(defn render-field-factory\n  \"Create a general field factory using the given input factory as the function to call to draw an input.\"\n  ([input-factory]\n   (render-field-factory {} input-factory))\n  ([addl-props input-factory]\n   (fn [{::form/keys [form-instance] :as env} {::attr/keys [type qualified-key] :as attribute}]\n     (let [props              (comp/props form-instance)\n           value              (or (form/computed-value env attribute)\n                                (and attribute (get props qualified-key)))\n           addl-props         (merge (?! (form/field-style-config env attribute :input/props) env) addl-props)\n           invalid?           (validation/invalid-attribute-value? env attribute)\n           validation-message (when invalid? (validation/validation-error-message env attribute))\n           field-label        (form/field-label env attribute)\n           visible?           (form/field-visible? form-instance attribute)\n           read-only?         (form/read-only? form-instance attribute)\n           addl-props         (if read-only? (assoc addl-props :readOnly \"readonly\") addl-props)]\n       (when visible?\n         (div :.ui.field {:key     (str qualified-key)\n                          :classes [(when invalid? \"error\")]}\n           (label\n             (or field-label (some-> qualified-key name str/capitalize))\n             (when validation-message (str ent/nbsp \"(\" validation-message \")\")))\n           (div :.ui.input\n             (input-factory (merge addl-props\n                              (cond->\n                                {:value    value\n                                 :onBlur   (fn [v] (form/input-blur! env qualified-key v))\n                                 :onChange (fn [v] (form/input-changed! env qualified-key v))}\n                                read-only? (assoc :readOnly \"\")))))\n           #_(when validation-message\n               (div :.ui.error.message\n                 (str validation-message)))))))))\n"]}