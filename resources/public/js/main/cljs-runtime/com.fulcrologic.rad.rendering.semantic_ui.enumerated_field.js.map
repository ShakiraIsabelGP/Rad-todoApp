{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/enumerated_field.cljc"],"mappings":"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","names":["p__62803","p__62804","map__62805","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__62806","com.fulcrologic.rad.rendering.semantic-ui.enumerated-field/enumerated-options","form-instance","env","qualified-key","attribute","map__62810","enumerated-values","enumeration-labels","cljs.core.merge","com.fulcrologic.fulcro.components/component-options","cljs.core.sort_by","cljs.core.mapv","k","com.fulcrologic.rad.options-util/?!","cljs.core/name","p__62812","p__62813","map__62814","map__62815","com.fulcrologic.rad.rendering.semantic-ui.enumerated-field/render-to-many","field-label","computed-options","com.fulcrologic.rad.form/field-visible?","props","com.fulcrologic.fulcro.components/props","read-only?","com.fulcrologic.rad.form/read-only?","options","or__4126__auto__","com.fulcrologic.rad.options_util._QMARK__BANG_","selected-ids","cljs.core/set","com.fulcrologic.fulcro.dom.macro_create_element","G__62818","clojure.string/capitalize","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","cljs.core.map","p__62819","map__62820","text","value","checked?","cljs.core/contains?","selection","cljs.core.conj","cljs.core.disj","com.fulcrologic.rad.form/input-changed!","p__62823","p__62824","map__62825","map__62826","com.fulcrologic.rad.rendering.semantic-ui.enumerated-field/render-to-one","invalid?","com.fulcrologic.rad.ui-validation/invalid-attribute-value?","user-props","com.fulcrologic.rad.form/field-style-config","G__62830","js/tr","cljs.core/first","p1__62822#","cljs.core.filter","cljs.core._EQ_","G__62831","com.fulcrologic.rad.rendering.semantic-ui.components/ui-wrapped-dropdown","v","p__62832","map__62833","com.fulcrologic.rad.rendering.semantic-ui.enumerated-field/render-field","cardinality"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.enumerated-field\n  (:require\n    #?@(:cljs\n        [[com.fulcrologic.fulcro.dom :as dom :refer [div label input]]\n         [cljs.reader :refer [read-string]]\n         [com.fulcrologic.semantic-ui.modules.dropdown.ui-dropdown :refer [ui-dropdown]]]\n        :clj\n        [[com.fulcrologic.fulcro.dom-server :as dom :refer [div label input]]])\n    [com.fulcrologic.fulcro-i18n.i18n :refer [tr]]\n    [com.fulcrologic.rad.ui-validation :as validation]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.rad.options-util :refer [?!]]\n    [com.fulcrologic.rad.rendering.semantic-ui.components :refer [ui-wrapped-dropdown]]\n    [com.fulcrologic.rad.attributes :as attr]\n    [clojure.string :as str]\n    [com.fulcrologic.rad.form :as form]))\n\n(defn enumerated-options [{::form/keys [form-instance] :as env} {::attr/keys [qualified-key] :as attribute}]\n  (let [{::attr/keys [enumerated-values]} attribute\n        enumeration-labels (merge\n                             (::attr/enumerated-labels attribute)\n                             (comp/component-options form-instance ::form/enumerated-labels qualified-key))]\n    ;; TODO: Sorting should be something users control\n    (sort-by :text\n      (mapv (fn [k]\n              {:text  (?! (get enumeration-labels k (name k)))\n               :value k}) enumerated-values))))\n\n(defn- render-to-many [{::form/keys [form-instance] :as env} {::form/keys [field-label]\n                                                              ::attr/keys [qualified-key computed-options] :as attribute}]\n  (when (form/field-visible? form-instance attribute)\n    (let [props        (comp/props form-instance)\n          read-only?   (form/read-only? form-instance attribute)\n          options      (or (?! computed-options env) (enumerated-options env attribute))\n          selected-ids (set (get props qualified-key))]\n      (div :.ui.field {:key (str qualified-key)}\n        (label (or field-label (some-> qualified-key name str/capitalize)))\n        (div :.ui.middle.aligned.celled.list.big {:style {:marginTop \"0\"}}\n          (map (fn [{:keys [text value]}]\n                 (let [checked? (contains? selected-ids value)]\n                   (div :.item {:key value}\n                     (div :.content {}\n                       (div :.ui.toggle.checkbox {:style {:marginTop \"0\"}}\n                         (dom/input\n                           {:type     \"checkbox\"\n                            :checked  checked?\n                            :disabled read-only?\n                            :onChange #(let [selection (if-not checked?\n                                                         (conj (set (or selected-ids #{})) value)\n                                                         (disj selected-ids value))]\n                                         (form/input-changed! env qualified-key selection))})\n                         (dom/label text))))))\n            options))))))\n\n(defn- render-to-one [{::form/keys [form-instance] :as env} {::form/keys [field-label]\n                                                             ::attr/keys [qualified-key computed-options] :as attribute}]\n  (when (form/field-visible? form-instance attribute)\n    (let [props      (comp/props form-instance)\n          read-only? (form/read-only? form-instance attribute)\n          invalid?   (validation/invalid-attribute-value? env attribute)\n          user-props (?! (form/field-style-config env attribute :input/props) env)\n          options    (or (?! computed-options env) (enumerated-options env attribute))\n          value      (get props qualified-key)]\n      (div :.ui.field {:key (str qualified-key) :classes [(when invalid? \"error\")]}\n        (label (str (or (?! field-label form-instance) (some-> qualified-key name str/capitalize))\n                 (when invalid? (str \" (\" (tr \"Required\") \")\"))))\n        (if read-only?\n          (let [value (first (filter #(= value (:value %)) options))]\n            (dom/input {:readOnly \"\"\n                        :value    (:text value)}))\n          (ui-wrapped-dropdown (merge\n                                 {:options  options\n                                  :value    value\n                                  :onChange (fn [v] (form/input-changed! env qualified-key v))}\n                                 user-props)))))))\n\n(defn render-field [env {::attr/keys [cardinality] :or {cardinality :one} :as attribute}]\n  (if (= :many cardinality)\n    (render-to-many env attribute)\n    (render-to-one env attribute)))\n"]}