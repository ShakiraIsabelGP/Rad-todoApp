{"version":3,"sources":["com/fulcrologic/rad/rendering/semantic_ui/blob_field.cljc"],"mappings":"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","names":["com.fulcrologic.rad.rendering.semantic-ui.blob-field/evt->js-files","evt","js-file-list","cljs.core.map","file-idx","js-file","name","cljs.core.range","options__50078__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__62835","com.fulcrologic.fulcro.components/props","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","map__62836","com.fulcrologic.fulcro.components/get-computed","js/com","js/com.fulcrologic","js/com.fulcrologic.rad","js/com.fulcrologic.rad.rendering","js/com.fulcrologic.rad.rendering.semantic-ui","js/com.fulcrologic.rad.rendering.semantic-ui.blob-field","js/com.fulcrologic.rad.rendering.semantic-ui.blob-field.FileUploadField","com.fulcrologic.fulcro.components/react-constructor","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.rad.rendering.semantic-ui.blob-field/FileUploadField","this","form-instance","master-form","env","accept-file-types","can-change?","qualified-key","attribute","r","goog.object/set","temp__5735__auto__","i","goog.object/get","file","cljs.core/first","com.fulcrologic.rad.blob/upload-file!","map__62839","props","read-only?","com.fulcrologic.rad.form/read-only?","com.fulcrologic.rad.options_util._QMARK__BANG_","url-key","com.fulcrologic.rad.blob/url-key","name-key","com.fulcrologic.rad.blob/filename-key","current-sha","url","filename","pct","com.fulcrologic.rad.blob/upload-percentage","has-current-value?","cljs.core/seq","save-ref","on-change","on-click","com.fulcrologic.fulcro.components.get_state","dirty?","com.fulcrologic.fulcro.algorithms.form_state.dirty_QMARK_","label","com.fulcrologic.rad.form/field-label","invalid?","com.fulcrologic.rad.ui-validation/invalid-attribute-value?","validation-message","com.fulcrologic.rad.ui-validation/validation-error-message","com.fulcrologic.fulcro.dom.macro_create_element","com.fulcrologic.rad.blob/blob-downloadable?","js/tr","com.fulcrologic.rad.blob/uploading?","com.fulcrologic.rad.rendering.semantic-ui.blob-field/ui-file-upload-field","com.fulcrologic.fulcro.components.computed_factory","G__62841","com.fulcrologic.rad.rendering.semantic-ui.blob-field/render-file-upload"],"sourcesContent":["(ns com.fulcrologic.rad.rendering.semantic-ui.blob-field\n  (:require\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    #?@(:cljs [[com.fulcrologic.fulcro.dom :as dom :refer [div input]]\n               [goog.object :as gobj]\n               [com.fulcrologic.fulcro.networking.file-upload :as file-upload]]\n        :clj  [[com.fulcrologic.fulcro.dom-server :as dom :refer [div input]]])\n    [com.fulcrologic.rad.form :as form]\n    [com.fulcrologic.fulcro-i18n.i18n :refer [tr]]\n    [com.fulcrologic.rad.attributes :as attr]\n    [taoensso.timbre :as log]\n    [com.fulcrologic.rad.ui-validation :as validation]\n    [com.fulcrologic.rad.blob :as blob]\n    [com.fulcrologic.rad.options-util :refer [?! narrow-keyword]]\n    [com.fulcrologic.rad.rendering.semantic-ui.components :refer [ui-wrapped-dropdown]]\n    [com.fulcrologic.rad.rendering.semantic-ui.field :refer [render-field-factory]]\n    [com.fulcrologic.fulcro.algorithms.form-state :as fs]))\n\n(defn evt->js-files [evt]\n  #?(:cljs\n     (let [js-file-list (.. evt -target -files)]\n       (map (fn [file-idx]\n              (let [js-file (.item js-file-list file-idx)\n                    name    (.-name js-file)]\n                js-file))\n         (range (.-length js-file-list))))))\n\n#_(defsc ImageUploadField [this\n                           {::form/keys [form-instance] :as env}\n                           {::blob/keys [accept-file-types]\n                            ::attr/keys [qualified-key] :as attribute}]\n    {:initLocalState (fn [this]\n                       #?(:cljs\n                          {:save-ref  (fn [r] (gobj/set this \"fileinput\" r))\n                           :on-click  (fn [evt] (when-let [i (gobj/get this \"fileinput\")]\n                                                  (.click i)))\n                           :on-change (fn [evt]\n                                        (let [env       (comp/props this)\n                                              attribute (comp/get-computed this)\n                                              file      (-> evt evt->js-files first)]\n                                          (blob/upload-file! env attribute file)))}))}\n    (let [props              (comp/props form-instance)\n          url-key            (narrow-keyword qualified-key \"url\")\n          current-sha        (get props qualified-key)\n          url                (get props url-key)\n          has-current-value? (seq current-sha)\n          {:keys [save-ref on-change on-click]} (comp/get-state this)\n          upload-complete?   false\n          label              (form/field-label env attribute)\n          valid?             (and upload-complete? has-current-value?)]\n      (div :.field {:key (str qualified-key)}\n        (dom/label label)\n        (div :.ui.tiny.image\n          (dom/img {:src     url :width \"100\"\n                    :onClick on-click})\n          (dom/input (cond-> {:id       (str qualified-key)\n                              :ref      save-ref\n                              :style    {:position \"absolute\"\n                                         :opacity  0\n                                         :top      0\n                                         :right    0}\n                              :onChange on-change\n                              :type     \"file\"}\n                       accept-file-types (assoc :allow (?! accept-file-types))))))))\n\n#_(def ui-image-upload-field (comp/computed-factory ImageUploadField\n                               {:keyfn (fn [props] (some-> props comp/get-computed ::attr/qualified-key))}))\n\n#_(defn render-image-upload [env attribute]\n    (ui-image-upload-field env attribute))\n\n(defsc FileUploadField [this\n                        {::form/keys [form-instance master-form] :as env}\n                        {::blob/keys [accept-file-types can-change?]\n                         ::attr/keys [qualified-key] :as attribute}]\n  {:componentDidMount (fn [this]\n                        (comment \"TRIGGER UPLOAD IF CONFIG SAYS TO?\"))\n   :initLocalState    (fn [this]\n                        #?(:cljs\n                           {:save-ref  (fn [r] (gobj/set this \"fileinput\" r))\n                            :on-click  (fn [evt] (when-let [i (gobj/get this \"fileinput\")]\n                                                   (.click i)))\n                            :on-change (fn [evt]\n                                         (let [env       (comp/props this)\n                                               attribute (comp/get-computed this)\n                                               file      (-> evt evt->js-files first)]\n                                           (blob/upload-file! this attribute file {:file-ident []})))}))}\n  (let [props              (comp/props form-instance)\n        read-only?         (or\n                             (form/read-only? master-form attribute)\n                             (form/read-only? form-instance attribute))\n        can-change?        (if read-only? false (?! can-change? env attribute))\n        url-key            (blob/url-key qualified-key)\n        name-key           (blob/filename-key qualified-key)\n        current-sha        (get props qualified-key)\n        url                (get props url-key)\n        filename           (get props name-key)\n        pct                (blob/upload-percentage props qualified-key)\n        has-current-value? (seq current-sha)\n        {:keys [save-ref on-change on-click]} (comp/get-state this)\n        dirty?             (if read-only? false (fs/dirty? props qualified-key))\n        label              (form/field-label env attribute)\n        invalid?           (if read-only? false (validation/invalid-attribute-value? env attribute))\n        validation-message (when invalid? (validation/validation-error-message env attribute))]\n    (div :.field {:key (str qualified-key)}\n      (dom/label label)\n      (cond\n        (blob/blob-downloadable? props qualified-key)\n        (dom/a {:href (str url \"?filename=\" filename)} (tr \"Download\"))\n\n        (blob/uploading? props qualified-key)\n        (dom/div :.ui.small.blue.progress\n          (div :.bar {:style {:transitionDuration \"300ms\"\n                              :display            \"block\"\n                              :width              pct}}\n            (div :.progress pct)))))))\n\n(def ui-file-upload-field (comp/computed-factory FileUploadField\n                            {:keyfn (fn [props] (some-> props comp/get-computed ::attr/qualified-key))}))\n\n(defn render-file-upload [env attribute]\n  (ui-file-upload-field env attribute))\n"]}